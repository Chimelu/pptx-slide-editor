"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/pptx/parse/route";
exports.ids = ["app/api/pptx/parse/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("timers");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpptx%2Fparse%2Froute&page=%2Fapi%2Fpptx%2Fparse%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpptx%2Fparse%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5Cpptx-editor%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5Cpptx-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpptx%2Fparse%2Froute&page=%2Fapi%2Fpptx%2Fparse%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpptx%2Fparse%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5Cpptx-editor%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5Cpptx-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_HP_pptx_editor_src_app_api_pptx_parse_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/pptx/parse/route.ts */ \"(rsc)/./src/app/api/pptx/parse/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/pptx/parse/route\",\n        pathname: \"/api/pptx/parse\",\n        filename: \"route\",\n        bundlePath: \"app/api/pptx/parse/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\HP\\\\pptx-editor\\\\src\\\\app\\\\api\\\\pptx\\\\parse\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_HP_pptx_editor_src_app_api_pptx_parse_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/pptx/parse/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcHR4JTJGcGFyc2UlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnBwdHglMkZwYXJzZSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnBwdHglMkZwYXJzZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q3BwdHgtZWRpdG9yJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNIUCU1Q3BwdHgtZWRpdG9yJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHB0eC1lZGl0b3IvPzA4MjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcSFBcXFxccHB0eC1lZGl0b3JcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccHB0eFxcXFxwYXJzZVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcHB0eC9wYXJzZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3BwdHgvcGFyc2VcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3BwdHgvcGFyc2Uvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxIUFxcXFxwcHR4LWVkaXRvclxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxwcHR4XFxcXHBhcnNlXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3BwdHgvcGFyc2Uvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpptx%2Fparse%2Froute&page=%2Fapi%2Fpptx%2Fparse%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpptx%2Fparse%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5Cpptx-editor%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5Cpptx-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/pptx/parse/route.ts":
/*!*****************************************!*\
  !*** ./src/app/api/pptx/parse/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jszip */ \"(rsc)/./node_modules/jszip/lib/index.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! xml2js */ \"(rsc)/./node_modules/xml2js/lib/xml2js.js\");\n/* harmony import */ var xml2js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(xml2js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get(\"file\");\n        if (!file) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"No file provided\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"\\uD83D\\uDCC1 Processing file:\", file.name);\n        // Convert File to Buffer\n        const arrayBuffer = await file.arrayBuffer();\n        const buffer = Buffer.from(arrayBuffer);\n        // Parse the PPTX file\n        const pptxService = new PPTXService();\n        const presentation = await pptxService.parsePPTX(buffer);\n        console.log(\"✅ Parsing completed successfully\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(presentation);\n    } catch (error) {\n        console.error(\"❌ Error parsing PPTX file:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to parse PPTX file\"\n        }, {\n            status: 500\n        });\n    }\n}\n// PPTX Service class (moved from backend)\nclass PPTXService {\n    async parsePPTX(buffer) {\n        try {\n            const zip = await jszip__WEBPACK_IMPORTED_MODULE_1___default().loadAsync(buffer);\n            const slides = await this.readSlides(zip);\n            const properties = await this.readPresentationProps(zip);\n            const presentation = {\n                id: this.generateId(),\n                name: \"Imported Presentation\",\n                slides,\n                metadata: properties\n            };\n            this.parsedPresentations.set(presentation.id, presentation);\n            console.log(\"✅ Parsing completed successfully\");\n            return presentation;\n        } catch (error) {\n            console.error(\"❌ Error parsing PPTX file:\", error);\n            throw error;\n        }\n    }\n    async getSlide(slideId) {\n        const presentations = Array.from(this.parsedPresentations.values());\n        for (const presentation of presentations){\n            const slide = presentation.slides.find((s)=>s.id === slideId);\n            if (slide) return slide;\n        }\n        return null;\n    }\n    async exportPPTX(presentationData) {\n        // Placeholder for export logic\n        console.log(\"\\uD83D\\uDEA7 Exporting PPTX (placeholder)\");\n        const zip = new (jszip__WEBPACK_IMPORTED_MODULE_1___default())();\n        zip.file(\"doc.txt\", JSON.stringify(presentationData, null, 2));\n        const content = await zip.generateAsync({\n            type: \"nodebuffer\"\n        });\n        return content;\n    }\n    async readSlides(zip) {\n        const slides = [];\n        try {\n            const presentationXml = await zip.file(\"ppt/presentation.xml\")?.async(\"text\");\n            if (!presentationXml) {\n                console.warn(\"No presentation.xml found.\");\n                return [];\n            }\n            console.log(\"\\uD83D\\uDCC4 Found presentation.xml, length:\", presentationXml.length);\n            // Parse XML using xml2js\n            const presentationData = await this.parseXML(presentationXml);\n            console.log(\"\\uD83D\\uDD0D Parsed presentation data:\", JSON.stringify(presentationData, null, 2));\n            // Navigate to the presentation element first\n            const presentation = this.findElement(presentationData, \"p:presentation\");\n            if (!presentation) {\n                console.warn(\"❌ No presentation element found\");\n                return [];\n            }\n            const sldIdList = this.findElement(presentation, \"p:sldIdLst\");\n            console.log(\"\\uD83D\\uDCCB Found sldIdList:\", sldIdList);\n            if (sldIdList) {\n                const sldIds = this.findElements(sldIdList, \"p:sldId\");\n                console.log(`🔢 Found ${sldIds.length} slide IDs:`, sldIds);\n                for(let i = 0; i < sldIds.length; i++){\n                    const sldId = sldIds[i];\n                    const rId = this.getAttribute(sldId, \"r:id\");\n                    console.log(`📝 Slide ${i + 1} has rId:`, rId);\n                    if (rId) {\n                        const relsXml = await zip.file(\"ppt/_rels/presentation.xml.rels\")?.async(\"text\");\n                        if (relsXml) {\n                            console.log(\"\\uD83D\\uDD17 Found relationships file, length:\", relsXml.length);\n                            const relsData = await this.parseXML(relsXml);\n                            console.log(\"\\uD83D\\uDD17 Parsed relationships data:\", JSON.stringify(relsData, null, 2));\n                            // Find the relationship that matches this slide's rId\n                            const relationships = this.findElements(relsData.Relationships, \"Relationship\");\n                            let target = null;\n                            console.log(`🔍 Looking for relationship with Id: ${rId}`);\n                            console.log(`🔍 Found ${relationships.length} relationships:`, relationships);\n                            for (const rel of relationships){\n                                const relId = this.getAttribute(rel, \"Id\");\n                                console.log(`🔍 Checking relationship Id: ${relId}`);\n                                if (relId === rId) {\n                                    target = this.getAttribute(rel, \"Target\");\n                                    console.log(`✅ Found matching relationship! Target: ${target}`);\n                                    break;\n                                }\n                            }\n                            console.log(\"\\uD83C\\uDFAF Final relationship target:\", target);\n                            if (target) {\n                                const slideFilePath = `ppt/${target}`;\n                                console.log(\"\\uD83D\\uDCC1 Slide file path:\", slideFilePath);\n                                const slide = await this.parseSlide(zip, slideFilePath, i + 1);\n                                if (slide) {\n                                    console.log(`✅ Successfully parsed slide ${i + 1}:`, slide);\n                                    slides.push(slide);\n                                } else {\n                                    console.warn(`❌ Failed to parse slide ${i + 1}`);\n                                }\n                            }\n                        } else {\n                            console.warn(\"❌ No relationships file found\");\n                        }\n                    }\n                }\n            } else {\n                console.warn(\"❌ No sldIdList found in presentation data\");\n            }\n        } catch (error) {\n            console.error(\"❌ Error reading slides:\", error);\n        }\n        console.log(`📊 Total slides loaded: ${slides.length}`);\n        return slides;\n    }\n    async parseSlide(zip, slideFilePath, slideNumber) {\n        try {\n            const slideFile = zip.file(slideFilePath);\n            if (!slideFile) {\n                console.warn(`Slide file not found: ${slideFilePath}`);\n                return null;\n            }\n            const slideContent = await slideFile.async(\"text\");\n            console.log(`📄 Slide ${slideNumber} XML content length: ${slideContent.length}`);\n            // Parse the slide XML content\n            const slideData = await this.parseXML(slideContent);\n            const objects = await this.extractSlideObjects(slideData, zip, `ppt/slides/_rels/slide${slideNumber}.xml.rels`);\n            // Return basic slide structure - frontend will handle rendering\n            return {\n                id: this.generateId(),\n                slideNumber,\n                width: 800,\n                height: 600,\n                objects,\n                // Store raw slide XML for frontend processing\n                rawData: slideData\n            };\n        } catch (error) {\n            console.error(`Error parsing slide ${slideNumber}:`, error);\n            return null;\n        }\n    }\n    async extractSlideObjects(slideData, zip, slideRelsPath) {\n        const objects = [];\n        try {\n            console.log(\"\\uD83D\\uDD0D Extracting objects from slide data\");\n            // Navigate the correct XML structure: p:sld -> p:cSld -> p:spTree\n            const slide = this.findElement(slideData, \"p:sld\");\n            if (!slide) {\n                console.warn(\"❌ No p:sld found in slide data\");\n                return objects;\n            }\n            const cSld = this.findElement(slide, \"p:cSld\");\n            if (!cSld) {\n                console.warn(\"❌ No p:cSld found in slide\");\n                return objects;\n            }\n            // Find the shape tree\n            const spTree = this.findElement(cSld, \"p:spTree\");\n            if (!spTree) {\n                console.warn(\"❌ No spTree found in slide\");\n                return objects;\n            }\n            // Extract all shapes (both individual and grouped)\n            const allShapes = [\n                ...this.findElements(spTree, \"p:sp\"),\n                ...this.findElements(spTree, \"p:grpSp\")\n            ];\n            console.log(`🔷 Found ${allShapes.length} total shapes in slide`);\n            for(let i = 0; i < allShapes.length; i++){\n                const shape = allShapes[i];\n                const shapeObject = await this.extractBasicShape(shape, i, zip, slideRelsPath);\n                if (shapeObject) {\n                    objects.push(shapeObject);\n                }\n            }\n        } catch (error) {\n            console.error(\"❌ Error extracting slide objects:\", error);\n        }\n        console.log(`📊 Total objects extracted: ${objects.length}`);\n        return objects;\n    }\n    async extractBasicShape(shape, index, zip, slideRelsPath) {\n        try {\n            // Get basic shape info\n            const nvSpPr = this.findElement(shape, \"p:nvSpPr\");\n            const cNvPr = this.findElement(nvSpPr, \"p:cNvPr\");\n            const name = this.getAttribute(cNvPr, \"name\") || `Shape ${index + 1}`;\n            // Check if it's a group\n            const isGroup = shape[\"p:grpSpPr\"] !== undefined;\n            // Check if it's a picture\n            const isPicture = shape[\"p:nvPicPr\"] !== undefined;\n            if (isPicture) {\n                console.log(`🔍 Found picture shape: ${name}`);\n                const imageObject = await this.extractImage(shape, zip, slideRelsPath);\n                if (imageObject) {\n                    return imageObject;\n                }\n            }\n            // Extract text content if present\n            const txBody = this.findElement(shape, \"p:txBody\");\n            let textContent = \"\";\n            if (txBody) {\n                textContent = this.extractTextContent(txBody);\n            }\n            // Basic shape object - let frontend handle the details\n            return {\n                id: this.generateId(),\n                type: isGroup ? \"group\" : \"shape\",\n                name,\n                text: textContent,\n                // Store raw XML data for frontend processing\n                rawData: shape\n            };\n        } catch (error) {\n            console.error(`Error extracting basic shape ${index}:`, error);\n            return null;\n        }\n    }\n    extractTextContent(txBody) {\n        try {\n            console.log(\"\\uD83D\\uDD0D Extracting text from txBody:\", JSON.stringify(txBody, null, 2));\n            console.log(\"\\uD83D\\uDD0D txBody keys:\", Object.keys(txBody));\n            const paragraphs = this.findElements(txBody, \"a:p\");\n            console.log(\"\\uD83D\\uDD0D Found paragraphs:\", paragraphs);\n            let text = \"\";\n            for (const paragraph of paragraphs){\n                const textRuns = this.findElements(paragraph, \"a:r\");\n                console.log(\"\\uD83D\\uDD0D Found text runs:\", textRuns);\n                for (const textRun of textRuns){\n                    const textElement = this.findElement(textRun, \"a:t\");\n                    console.log(\"\\uD83D\\uDD0D Found text element:\", textElement);\n                    // Handle different text content formats from xml2js\n                    if (textElement) {\n                        if (typeof textElement === \"string\") {\n                            // Direct string content\n                            text += textElement;\n                        } else if (textElement._) {\n                            // Content in _ property\n                            text += textElement._;\n                        } else if (textElement.$ && textElement.$.val) {\n                            // Content in attribute\n                            text += textElement.$.val;\n                        } else {\n                            // Try to find any text content\n                            console.log(\"\\uD83D\\uDD0D Text element structure:\", textElement);\n                            const textKeys = Object.keys(textElement);\n                            for (const key of textKeys){\n                                if (key !== \"$\" && typeof textElement[key] === \"string\") {\n                                    text += textElement[key];\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                text += \"\\n\";\n            }\n            console.log(\"\\uD83D\\uDD0D Final extracted text:\", text);\n            return text.trim();\n        } catch (error) {\n            console.error(\"Error extracting text content:\", error);\n            return \"\";\n        }\n    }\n    async extractImage(shape, zip, slideRelsPath) {\n        try {\n            // Check if this is a picture shape\n            const nvPicPr = this.findElement(shape, \"p:nvPicPr\");\n            if (!nvPicPr) {\n                return null // Not a picture shape\n                ;\n            }\n            // Get the picture properties\n            const picPr = this.findElement(shape, \"p:picPr\");\n            if (!picPr) {\n                return null;\n            }\n            // Find the image reference\n            const blipFill = this.findElement(picPr, \"a:blipFill\");\n            if (!blipFill) {\n                return null;\n            }\n            const blip = this.findElement(blipFill, \"a:blip\");\n            if (!blip) {\n                return null;\n            }\n            // Get the relationship ID for the image\n            const rId = this.getAttribute(blip, \"r:embed\");\n            if (!rId) {\n                console.log(\"❌ No r:embed found for image\");\n                return null;\n            }\n            console.log(`🔍 Found image with rId: ${rId}`);\n            // Find the image file path from relationships\n            const slideRelsXml = await zip.file(slideRelsPath)?.async(\"text\");\n            if (slideRelsXml) {\n                const relsData = await this.parseXML(slideRelsXml);\n                const relationships = this.findElements(relsData.Relationships, \"Relationship\");\n                for (const rel of relationships){\n                    const relId = this.getAttribute(rel, \"Id\");\n                    if (relId === rId) {\n                        const target = this.getAttribute(rel, \"Target\");\n                        if (target) {\n                            const imagePath = `ppt/${target}`;\n                            console.log(`🔍 Found image file: ${imagePath}`);\n                            // Check if the image file exists\n                            const imageFile = zip.file(imagePath);\n                            if (imageFile) {\n                                // Get image data as base64\n                                const imageData = await imageFile.async(\"base64\");\n                                const imageType = this.getImageMimeType(imagePath);\n                                return {\n                                    id: this.generateId(),\n                                    type: \"image\",\n                                    name: \"Image\",\n                                    src: `data:${imageType};base64,${imageData}`,\n                                    rawData: shape\n                                };\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error extracting image:\", error);\n            return null;\n        }\n    }\n    getImageMimeType(filePath) {\n        const extension = filePath.split(\".\").pop()?.toLowerCase();\n        switch(extension){\n            case \"jpg\":\n            case \"jpeg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"tiff\":\n                return \"image/tiff\";\n            default:\n                return \"image/jpeg\" // Default fallback\n                ;\n        }\n    }\n    async readPresentationProps(zip) {\n        try {\n            const coreProps = zip.file(\"docProps/core.xml\");\n            if (coreProps) {\n                const content = await coreProps.async(\"text\");\n                // Parse XML content here if needed\n                return {\n                    author: \"Unknown\",\n                    created: new Date().toISOString(),\n                    modified: new Date().toISOString()\n                };\n            }\n        } catch (error) {\n            console.error(\"Error reading presentation properties:\", error);\n        }\n        return {};\n    }\n    generateId() {\n        return crypto.randomUUID();\n    }\n    async parseXML(xmlString) {\n        return new Promise((resolve, reject)=>{\n            (0,xml2js__WEBPACK_IMPORTED_MODULE_2__.parseString)(xmlString, {\n                explicitArray: false\n            }, (err, result)=>{\n                if (err) reject(err);\n                else resolve(result);\n            });\n        });\n    }\n    findElement(data, tagName) {\n        try {\n            const parts = tagName.split(\":\");\n            if (parts.length === 2) {\n                const namespace = parts[0];\n                const element = parts[1];\n                const fullTag = `${namespace}:${element}`;\n                // Try different approaches to find the element\n                if (data[fullTag]) {\n                    console.log(`✅ Found element ${fullTag} directly`);\n                    return data[fullTag];\n                }\n                if (data[element]) {\n                    console.log(`✅ Found element ${element} without namespace`);\n                    return data[element];\n                }\n                // Check if it's nested in a different structure\n                for(const key in data){\n                    if (key.includes(element) || key.includes(namespace)) {\n                        console.log(`🔍 Potential match found: ${key}`);\n                    }\n                }\n                console.log(`❌ Element ${fullTag} not found in data keys:`, Object.keys(data));\n                return undefined;\n            }\n            // For non-namespaced elements, try direct access\n            if (data[tagName]) {\n                console.log(`✅ Found element ${tagName} directly`);\n                return data[tagName];\n            }\n            console.log(`❌ Element ${tagName} not found in data keys:`, Object.keys(data));\n            return undefined;\n        } catch (error) {\n            console.error(`Error in findElement for ${tagName}:`, error);\n            return undefined;\n        }\n    }\n    findElements(data, tagName) {\n        const element = this.findElement(data, tagName);\n        if (!element) {\n            console.log(`❌ No elements found for ${tagName}`);\n            return [];\n        }\n        return Array.isArray(element) ? element : [\n            element\n        ];\n    }\n    getAttribute(element, attrName) {\n        try {\n            if (!element || !element.$) {\n                console.log(`❌ Element or attributes not found for ${attrName}:`, element);\n                return null;\n            }\n            const value = element.$[attrName];\n            console.log(`🔍 Attribute ${attrName}:`, value);\n            return value || null;\n        } catch (error) {\n            console.error(`Error getting attribute ${attrName}:`, error);\n            return null;\n        }\n    }\n    constructor(){\n        this.parsedPresentations = new Map();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/pptx/parse/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/jszip","vendor-chunks/xmlbuilder","vendor-chunks/pako","vendor-chunks/readable-stream","vendor-chunks/xml2js","vendor-chunks/inherits","vendor-chunks/util-deprecate","vendor-chunks/string_decoder","vendor-chunks/sax","vendor-chunks/safe-buffer","vendor-chunks/process-nextick-args","vendor-chunks/lie","vendor-chunks/isarray","vendor-chunks/immediate","vendor-chunks/core-util-is"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpptx%2Fparse%2Froute&page=%2Fapi%2Fpptx%2Fparse%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpptx%2Fparse%2Froute.ts&appDir=C%3A%5CUsers%5CHP%5Cpptx-editor%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CHP%5Cpptx-editor&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();
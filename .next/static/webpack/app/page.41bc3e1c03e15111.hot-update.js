"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/pptxParser.ts":
/*!*********************************!*\
  !*** ./src/utils/pptxParser.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PPTXParser: function() { return /* binding */ PPTXParser; }\n/* harmony export */ });\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jszip */ \"(app-pages-browser)/./node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_0__);\n\nclass PPTXParser {\n    async parseFile(file) {\n        try {\n            console.log(\"Starting PPTX parsing...\");\n            // Load the ZIP file\n            this.zip = await jszip__WEBPACK_IMPORTED_MODULE_0___default().loadAsync(file);\n            console.log(\"ZIP file loaded successfully\");\n            // List all files for debugging\n            const fileNames = Object.keys(this.zip.files);\n            console.log(\"Files in ZIP:\", fileNames);\n            // Parse the document\n            const slides = await this.readSlides();\n            const properties = await this.readPresentationProps();\n            console.log(\"Parsing completed successfully\");\n            return {\n                id: crypto.randomUUID(),\n                name: file.name.replace(\".pptx\", \"\"),\n                slides,\n                metadata: properties\n            };\n        } catch (error) {\n            console.error(\"Error parsing PPTX file:\", error);\n            throw error;\n        }\n    }\n    async readPresentationProps() {\n        try {\n            var _this_zip;\n            const coreProps = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(\"docProps/core.xml\");\n            if (coreProps) {\n                const content = await coreProps.async(\"text\");\n                const parser = new DOMParser();\n                const xml = parser.parseFromString(content, \"text/xml\");\n                const authorElement = xml.querySelector(\"dc\\\\:creator, creator\");\n                return {\n                    author: (authorElement === null || authorElement === void 0 ? void 0 : authorElement.textContent) || undefined\n                };\n            }\n        } catch (error) {\n            console.warn(\"Could not read presentation properties:\", error);\n        }\n        return {};\n    }\n    async readSlides() {\n        const slides = [];\n        try {\n            var _this_zip;\n            // Get slide count from presentation.xml\n            const presentation = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(\"ppt/presentation.xml\");\n            if (presentation) {\n                const content = await presentation.async(\"text\");\n                console.log(\"Presentation XML content:\", content.substring(0, 500) + \"...\");\n                const parser = new DOMParser();\n                const xml = parser.parseFromString(content, \"text/xml\");\n                // Try multiple approaches to find slides\n                let slideIds = xml.getElementsByTagName(\"sldId\");\n                console.log(\"Found \".concat(slideIds.length, \" slides using 'sldId' tag\"));\n                // If no slides found, try alternative approaches\n                if (slideIds.length === 0) {\n                    var _this_zip1;\n                    // Try looking for slides in the slides folder directly\n                    const slideFiles = Object.keys(((_this_zip1 = this.zip) === null || _this_zip1 === void 0 ? void 0 : _this_zip1.files) || {}).filter((name)=>name.startsWith(\"ppt/slides/slide\") && name.endsWith(\".xml\")).sort();\n                    console.log(\"Found slide files directly:\", slideFiles);\n                    if (slideFiles.length > 0) {\n                        // Create slides from the files we found\n                        for(let i = 0; i < slideFiles.length; i++){\n                            const slideFile = slideFiles[i];\n                            const slideNumber = i + 1;\n                            console.log(\"Processing slide file: \".concat(slideFile));\n                            const slide = await this.readSlideFromFile(slideFile, slideNumber);\n                            if (slide) {\n                                slides.push(slide);\n                                console.log(\"Successfully loaded slide \".concat(slideNumber, \" from file\"));\n                            }\n                        }\n                    }\n                } else {\n                    // Process slides using the traditional method\n                    for(let i = 0; i < slideIds.length; i++){\n                        const slideId = slideIds[i].getAttribute(\"r:id\");\n                        console.log(\"Processing slide \".concat(i + 1, \" with ID: \").concat(slideId));\n                        if (slideId) {\n                            const slide = await this.readSlide(slideId, i + 1);\n                            if (slide) {\n                                slides.push(slide);\n                                console.log(\"Successfully loaded slide \".concat(i + 1));\n                            } else {\n                                console.warn(\"Failed to load slide \".concat(i + 1));\n                            }\n                        }\n                    }\n                }\n            } else {\n                console.warn(\"Could not find presentation.xml\");\n            }\n        } catch (error) {\n            console.error(\"Error reading slides:\", error);\n            // Create a default slide if parsing fails\n            slides.push(this.createDefaultSlide());\n        }\n        console.log(\"Total slides loaded: \".concat(slides.length));\n        return slides.length > 0 ? slides : [\n            this.createDefaultSlide()\n        ];\n    }\n    async readSlide(slideId, slideNumber) {\n        try {\n            var _this_zip;\n            // Try to find the slide file directly first\n            let slideFile = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(\"ppt/slides/slide\".concat(slideNumber, \".xml\"));\n            // If not found, try to find it through relationships\n            if (!slideFile) {\n                var _this_zip1;\n                const slideRel = (_this_zip1 = this.zip) === null || _this_zip1 === void 0 ? void 0 : _this_zip1.file(\"ppt/slides/_rels/slide\".concat(slideNumber, \".xml.rels\"));\n                if (slideRel) {\n                    var _relXml_querySelector;\n                    const relContent = await slideRel.async(\"text\");\n                    const relParser = new DOMParser();\n                    const relXml = relParser.parseFromString(relContent, \"text/xml\");\n                    const slideTarget = (_relXml_querySelector = relXml.querySelector('Relationship[Id=\"'.concat(slideId, '\"]'))) === null || _relXml_querySelector === void 0 ? void 0 : _relXml_querySelector.getAttribute(\"Target\");\n                    if (slideTarget) {\n                        var _this_zip2;\n                        const slidePath = \"ppt/slides/\".concat(slideTarget.split(\"/\").pop());\n                        slideFile = (_this_zip2 = this.zip) === null || _this_zip2 === void 0 ? void 0 : _this_zip2.file(slidePath);\n                    }\n                }\n            }\n            // If still not found, try to find any slide file\n            if (!slideFile) {\n                var _this_zip3;\n                const slideFiles = Object.keys(((_this_zip3 = this.zip) === null || _this_zip3 === void 0 ? void 0 : _this_zip3.files) || {}).filter((name)=>name.startsWith(\"ppt/slides/slide\") && name.endsWith(\".xml\")).sort();\n                if (slideFiles.length > 0) {\n                    var _this_zip4;\n                    const targetSlide = slideFiles[slideNumber - 1] || slideFiles[0];\n                    slideFile = (_this_zip4 = this.zip) === null || _this_zip4 === void 0 ? void 0 : _this_zip4.file(targetSlide);\n                }\n            }\n            if (!slideFile) {\n                console.warn(\"Could not find slide file for slide \".concat(slideNumber));\n                return null;\n            }\n            const slideContent = await slideFile.async(\"text\");\n            const slideParser = new DOMParser();\n            const slideXml = slideParser.parseFromString(slideContent, \"text/xml\");\n            // Extract slide dimensions\n            const sldSz = slideXml.getElementsByTagName(\"sldSz\")[0];\n            const width = parseInt((sldSz === null || sldSz === void 0 ? void 0 : sldSz.getAttribute(\"cx\")) || \"9144000\") / 12700 // Convert EMUs to pixels\n            ;\n            const height = parseInt((sldSz === null || sldSz === void 0 ? void 0 : sldSz.getAttribute(\"cy\")) || \"6858000\") / 12700;\n            // Extract shapes\n            const objects = await this.extractShapes(slideXml, slideNumber);\n            return {\n                id: crypto.randomUUID(),\n                name: \"Slide \".concat(slideNumber),\n                width,\n                height,\n                objects\n            };\n        } catch (error) {\n            console.error(\"Error reading slide \".concat(slideNumber, \":\"), error);\n            return null;\n        }\n    }\n    async readSlideFromFile(slideFilePath, slideNumber) {\n        try {\n            var _this_zip;\n            const slideFile = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(slideFilePath);\n            if (!slideFile) {\n                console.warn(\"Could not find slide file: \".concat(slideFilePath));\n                return null;\n            }\n            const slideContent = await slideFile.async(\"text\");\n            console.log(\"Slide \".concat(slideNumber, \" XML content:\"), slideContent.substring(0, 1000) + \"...\");\n            const slideParser = new DOMParser();\n            const slideXml = slideParser.parseFromString(slideContent, \"text/xml\");\n            // Extract slide dimensions with better namespace handling\n            let sldSz = slideXml.getElementsByTagName(\"sldSz\")[0];\n            if (!sldSz) {\n                sldSz = slideXml.getElementsByTagName(\"p:sldSz\")[0];\n            }\n            let width = 800, height = 600 // Default dimensions\n            ;\n            if (sldSz) {\n                const cx = sldSz.getAttribute(\"cx\");\n                const cy = sldSz.getAttribute(\"cy\");\n                console.log(\"Slide \".concat(slideNumber, \" dimensions from XML:\"), {\n                    cx,\n                    cy\n                });\n                if (cx && cy) {\n                    // Convert EMUs to pixels\n                    const emuToPixel = 96 / 914400;\n                    width = parseInt(cx) * emuToPixel;\n                    height = parseInt(cy) * emuToPixel;\n                    console.log(\"Slide \".concat(slideNumber, \" converted dimensions:\"), {\n                        width,\n                        height\n                    });\n                }\n            } else {\n                console.warn(\"No sldSz found in slide \".concat(slideNumber, \", using defaults\"));\n            }\n            // Extract shapes\n            const objects = await this.extractShapes(slideXml, slideNumber);\n            return {\n                id: crypto.randomUUID(),\n                name: \"Slide \".concat(slideNumber),\n                width: Math.max(width, 800),\n                height: Math.max(height, 600),\n                objects\n            };\n        } catch (error) {\n            console.error(\"Error reading slide from file \".concat(slideFilePath, \":\"), error);\n            return null;\n        }\n    }\n    async extractShapes(slideXml, slideNumber) {\n        const objects = [];\n        try {\n            console.log(\"Extracting shapes from slide \".concat(slideNumber));\n            // Try multiple approaches to find shapes\n            // Approach 1: Look for spTree > sp (traditional structure)\n            // Use a more robust approach to handle namespaces\n            let spTree = this.findElementByTagName(slideXml, \"spTree\");\n            if (spTree) {\n                const textBoxes = this.findElementsByTagName(spTree, \"sp\");\n                console.log(\"Found \".concat(textBoxes.length, \" shape elements in spTree\"));\n                for(let i = 0; i < textBoxes.length; i++){\n                    const textBox = textBoxes[i];\n                    console.log(\"Processing shape \".concat(i + 1, \":\"), textBox.tagName, textBox.getAttribute(\"id\"), textBox.getAttribute(\"name\"));\n                    // Check if this is a placeholder\n                    const nvPr = this.findElementByTagName(textBox, \"nvPr\");\n                    const ph = nvPr ? this.findElementByTagName(nvPr, \"ph\") : null;\n                    if (ph) {\n                        const phType = ph.getAttribute(\"type\");\n                        console.log(\"Shape \".concat(i + 1, \" is a placeholder of type: \").concat(phType));\n                    }\n                    // Check if this is a grouped shape\n                    const grpSp = this.findElementByTagName(textBox, \"grpSp\");\n                    if (grpSp) {\n                        console.log(\"Shape \".concat(i + 1, \" is a grouped shape, extracting group\"));\n                        const groupObject = this.extractGroupedShape(grpSp, slideNumber, i);\n                        if (groupObject) {\n                            var _groupObject_children;\n                            objects.push(groupObject);\n                            console.log(\"Successfully extracted grouped shape \".concat(i + 1, \" with \").concat(((_groupObject_children = groupObject.children) === null || _groupObject_children === void 0 ? void 0 : _groupObject_children.length) || 0, \" children\"));\n                        }\n                        continue;\n                    }\n                    // Check if this is a text shape\n                    const txBody = this.findElementByTagName(textBox, \"txBody\");\n                    const hasText = txBody && this.findElementsByTagName(txBody, \"t\").length > 0;\n                    if (hasText) {\n                        // For text shapes, extract individual text elements instead of the main shape\n                        console.log(\"Shape \".concat(i + 1, \" has text, extracting individual text elements\"));\n                        const textObjects = this.extractIndividualTextElements(textBox, slideNumber, i);\n                        objects.push(...textObjects);\n                        console.log(\"Extracted \".concat(textObjects.length, \" text objects from shape \").concat(i + 1));\n                    } else {\n                        // For non-text shapes, extract as basic shape\n                        console.log(\"Shape \".concat(i + 1, \" has no text, extracting as basic shape\"));\n                        const shape = this.extractBasicShape(textBox, slideNumber, i);\n                        if (shape) {\n                            objects.push(shape);\n                            console.log(\"Successfully extracted basic shape \".concat(i + 1, \":\"), shape.type);\n                        }\n                    }\n                }\n            } else {\n                console.warn(\"No spTree found in slide\");\n            }\n            // Approach 2: Look for shapes directly in the slide\n            if (objects.length === 0) {\n                console.log(\"Trying alternative shape extraction...\");\n                // Look for any sp elements anywhere in the slide\n                const allSpElements = this.findElementsByTagName(slideXml, \"sp\");\n                console.log(\"Found \".concat(allSpElements.length, \" sp elements in slide\"));\n                for(let i = 0; i < allSpElements.length; i++){\n                    const spElement = allSpElements[i];\n                    console.log(\"Processing sp element \".concat(i + 1, \":\"), spElement.tagName, spElement.getAttribute(\"id\"));\n                    // Check for grouped shapes first\n                    const grpSp = this.findElementByTagName(spElement, \"grpSp\");\n                    if (grpSp) {\n                        console.log(\"SP element \".concat(i + 1, \" is a grouped shape\"));\n                        const groupObject = this.extractGroupedShape(grpSp, slideNumber, i);\n                        if (groupObject) {\n                            objects.push(groupObject);\n                        }\n                        continue;\n                    }\n                    const txBody = this.findElementByTagName(spElement, \"txBody\");\n                    const hasText = txBody && this.findElementsByTagName(txBody, \"t\").length > 0;\n                    if (hasText) {\n                        const textObjects = this.extractIndividualTextElements(spElement, slideNumber, i);\n                        objects.push(...textObjects);\n                    } else {\n                        const shape = this.extractBasicShape(spElement, slideNumber, i);\n                        if (shape) {\n                            objects.push(shape);\n                        }\n                    }\n                }\n            }\n            // Approach 3: Look for text elements directly\n            if (objects.length === 0) {\n                console.log(\"Trying direct text extraction...\");\n                const textElements = this.findElementsByTagName(slideXml, \"t\");\n                console.log(\"Found \".concat(textElements.length, \" text elements directly in slide\"));\n                if (textElements.length > 0) {\n                    // Create a simple text object from the first text element\n                    const firstText = textElements[0];\n                    const textContent = firstText.textContent || \"Text\";\n                    console.log('Creating text object with content: \"'.concat(textContent, '\"'));\n                    const textObject = {\n                        id: crypto.randomUUID(),\n                        type: \"text\",\n                        transform: {\n                            left: 100,\n                            top: 100,\n                            width: 300,\n                            height: 100,\n                            angle: 0,\n                            scaleX: 1,\n                            scaleY: 1,\n                            flipX: false,\n                            flipY: false\n                        },\n                        style: {\n                            fontFamily: \"Arial\",\n                            fontSize: 18,\n                            fontWeight: \"normal\",\n                            fontStyle: \"normal\",\n                            textDecoration: \"none\",\n                            color: \"#000000\",\n                            textAlign: \"left\",\n                            lineHeight: 1.2\n                        },\n                        content: textContent\n                    };\n                    objects.push(textObject);\n                    console.log(\"Created fallback text object\");\n                }\n            }\n            // Extract images\n            const images = this.findElementsByTagName(slideXml, \"pic\");\n            console.log(\"Found \".concat(images.length, \" image elements\"));\n            for(let i = 0; i < images.length; i++){\n                const image = images[i];\n                const shape = this.extractImage(image, slideNumber, i);\n                if (shape) {\n                    objects.push(shape);\n                    console.log(\"Successfully extracted image \".concat(i + 1));\n                }\n            }\n            console.log(\"Total objects extracted: \".concat(objects.length));\n            console.log(\"Final objects:\", objects.map((obj)=>({\n                    type: obj.type,\n                    content: obj.content,\n                    transform: obj.transform\n                })));\n        } catch (error) {\n            console.error(\"Error extracting shapes:\", error);\n        }\n        return objects;\n    }\n    // Helper methods to handle XML namespaces\n    findElementByTagName(parent, tagName) {\n        // Try multiple approaches to find the element\n        let element = parent.getElementsByTagName(tagName)[0];\n        if (element) return element;\n        // If not found, try with common namespace prefixes\n        const prefixes = [\n            \"p:\",\n            \"a:\",\n            \"r:\",\n            \"\"\n        ];\n        for (const prefix of prefixes){\n            const fullTagName = prefix + tagName;\n            element = parent.getElementsByTagName(fullTagName)[0];\n            if (element) return element;\n        }\n        // Last resort: search by partial tag name\n        const allElements = parent.getElementsByTagName(\"*\");\n        for(let i = 0; i < allElements.length; i++){\n            const el = allElements[i];\n            if (el.tagName.endsWith(tagName) || el.tagName.includes(tagName)) {\n                return el;\n            }\n        }\n        return null;\n    }\n    findElementsByTagName(parent, tagName) {\n        // Try multiple approaches to find elements\n        let elements = Array.from(parent.getElementsByTagName(tagName));\n        if (elements.length > 0) return elements;\n        // If not found, try with common namespace prefixes\n        const prefixes = [\n            \"p:\",\n            \"a:\",\n            \"r:\",\n            \"\"\n        ];\n        for (const prefix of prefixes){\n            const fullTagName = prefix + tagName;\n            elements = Array.from(parent.getElementsByTagName(fullTagName));\n            if (elements.length > 0) return elements;\n        }\n        // Last resort: search by partial tag name\n        const allElements = parent.getElementsByTagName(\"*\");\n        const matchingElements = [];\n        for(let i = 0; i < allElements.length; i++){\n            const el = allElements[i];\n            if (el.tagName.endsWith(tagName) || el.tagName.includes(tagName)) {\n                matchingElements.push(el);\n            }\n        }\n        return matchingElements;\n    }\n    extractImage(image, slideNumber, index) {\n        try {\n            const spPr = this.findElementByTagName(image, \"spPr\");\n            if (!spPr) return null;\n            const transform = this.extractTransform(spPr);\n            // For now, we'll create a placeholder image\n            // In a real implementation, you'd extract the actual image data\n            return {\n                id: crypto.randomUUID(),\n                type: \"image\",\n                transform,\n                style: {},\n                src: \"data:image/svg+xml;base64,\".concat(btoa('<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"100\" height=\"100\" fill=\"#ccc\"/><text x=\"50\" y=\"50\" text-anchor=\"middle\" dy=\".3em\">Image</text></svg>'))\n            };\n        } catch (error) {\n            console.error(\"Error extracting image \".concat(index, \":\"), error);\n            return null;\n        }\n    }\n    extractGroupedShape(grpSp, slideNumber, index) {\n        try {\n            console.log(\"Extracting grouped shape \".concat(index, \" from slide \").concat(slideNumber));\n            // Extract the group's transform\n            const grpSpPr = this.findElementByTagName(grpSp, \"grpSpPr\");\n            const transform = grpSpPr ? this.extractTransform(grpSpPr) : {\n                left: 0,\n                top: 0,\n                width: 400,\n                height: 300,\n                angle: 0,\n                scaleX: 1,\n                scaleY: 1,\n                flipX: false,\n                flipY: false\n            };\n            // Extract child shapes from the group\n            const children = [];\n            // Look for sp elements within the group\n            const childSpElements = this.findElementsByTagName(grpSp, \"sp\");\n            console.log(\"Found \".concat(childSpElements.length, \" child shapes in group \").concat(index));\n            for(let i = 0; i < childSpElements.length; i++){\n                const childSp = childSpElements[i];\n                console.log(\"Processing child shape \".concat(i + 1, \" in group \").concat(index));\n                // Check if child has text\n                const txBody = this.findElementByTagName(childSp, \"txBody\");\n                const hasText = txBody && this.findElementsByTagName(txBody, \"t\").length > 0;\n                if (hasText) {\n                    // Extract text objects from child\n                    const textObjects = this.extractIndividualTextElements(childSp, slideNumber, i);\n                    children.push(...textObjects);\n                } else {\n                    // Extract as basic shape\n                    const childShape = this.extractBasicShape(childSp, slideNumber, i);\n                    if (childShape) {\n                        children.push(childShape);\n                    }\n                }\n            }\n            // Look for pic elements within the group\n            const childPicElements = this.findElementsByTagName(grpSp, \"pic\");\n            console.log(\"Found \".concat(childPicElements.length, \" child images in group \").concat(index));\n            for(let i = 0; i < childPicElements.length; i++){\n                const childPic = childPicElements[i];\n                const childImage = this.extractImage(childPic, slideNumber, i);\n                if (childImage) {\n                    children.push(childImage);\n                }\n            }\n            // Create the group object\n            const groupObject = {\n                id: crypto.randomUUID(),\n                type: \"group\",\n                transform,\n                style: {},\n                children,\n                groupId: \"group-\".concat(slideNumber, \"-\").concat(index)\n            };\n            console.log(\"Successfully created group object with \".concat(children.length, \" children\"));\n            return groupObject;\n        } catch (error) {\n            console.error(\"Error extracting grouped shape \".concat(index, \":\"), error);\n            return null;\n        }\n    }\n    extractBasicShape(shape, slideNumber, index) {\n        try {\n            var _prstGeom_getAttribute;\n            console.log(\"Extracting basic shape \".concat(index + 1, \" from slide \").concat(slideNumber));\n            const spPr = this.findElementByTagName(shape, \"spPr\");\n            if (!spPr) {\n                console.warn(\"No spPr found in basic shape \".concat(index + 1));\n                return null;\n            }\n            const transform = this.extractTransform(spPr);\n            // Get the actual shape type from the XML with better detection\n            let prstGeom = this.findElementByTagName(spPr, \"prstGeom\");\n            let shapeType = \"rectangle\";\n            if (prstGeom) {\n                const prst = prstGeom.getAttribute(\"prst\");\n                console.log(\"Found shape type in XML: \".concat(prst));\n                // Enhanced shape type detection\n                switch(prst){\n                    case \"rect\":\n                    case \"roundRect\":\n                    case \"snip1Rect\":\n                    case \"snip2Rect\":\n                    case \"snipRoundRect\":\n                    case \"round1Rect\":\n                    case \"round2Rect\":\n                        shapeType = \"rectangle\";\n                        break;\n                    case \"ellipse\":\n                    case \"oval\":\n                        shapeType = \"ellipse\";\n                        break;\n                    case \"line\":\n                    case \"straightConnector1\":\n                    case \"straightConnector2\":\n                    case \"straightConnector3\":\n                    case \"straightConnector4\":\n                    case \"straightConnector5\":\n                    case \"straightConnector6\":\n                    case \"bentConnector2\":\n                    case \"bentConnector3\":\n                    case \"bentConnector4\":\n                    case \"bentConnector5\":\n                        shapeType = \"line\";\n                        break;\n                    default:\n                        console.log(\"Unknown shape type: \".concat(prst, \", defaulting to rectangle\"));\n                        shapeType = \"rectangle\";\n                }\n            } else {\n                // Try to determine shape type from other properties\n                const custGeom = this.findElementByTagName(spPr, \"custGeom\");\n                if (custGeom) {\n                    console.log(\"Found custom geometry, defaulting to rectangle\");\n                    shapeType = \"rectangle\";\n                } else {\n                    console.log(\"No geometry found, defaulting to rectangle\");\n                    shapeType = \"rectangle\";\n                }\n            }\n            console.log(\"Extracted basic shape: type=\".concat(shapeType, \", transform=\"), transform);\n            // For basic shapes, we might still have some text content (like placeholders)\n            let content = \"\";\n            const txBody = this.findElementByTagName(shape, \"txBody\");\n            if (txBody) {\n                content = this.extractTextContent(shape);\n            }\n            // Check if this is a placeholder\n            const nvPr = this.findElementByTagName(shape, \"nvPr\");\n            const ph = nvPr ? this.findElementByTagName(nvPr, \"ph\") : null;\n            if (ph) {\n                const phType = ph.getAttribute(\"type\");\n                if (phType === \"title\") {\n                    content = \"Title Placeholder\";\n                } else if (phType === \"body\") {\n                    content = \"Body Placeholder\";\n                } else if (phType === \"pic\") {\n                    content = \"Picture Placeholder\";\n                } else {\n                    content = \"Content Placeholder\";\n                }\n            }\n            // Get shape name for better identification\n            const cNvPr = this.findElementByTagName(shape, \"cNvPr\");\n            const shapeName = (cNvPr === null || cNvPr === void 0 ? void 0 : cNvPr.getAttribute(\"name\")) || \"Shape \".concat(index + 1);\n            console.log(\"Shape name: \".concat(shapeName));\n            // Enhanced styling based on shape type\n            const style = {\n                fill: shapeType === \"line\" ? \"transparent\" : \"#e5e7eb\",\n                stroke: \"#6b7280\",\n                strokeWidth: shapeType === \"line\" ? 2 : 1\n            };\n            // Add corner radius for rounded rectangles\n            if (shapeType === \"rectangle\" && (prstGeom === null || prstGeom === void 0 ? void 0 : (_prstGeom_getAttribute = prstGeom.getAttribute(\"prst\")) === null || _prstGeom_getAttribute === void 0 ? void 0 : _prstGeom_getAttribute.includes(\"round\"))) {\n                style.rx = 10;\n                style.ry = 10;\n            }\n            return {\n                id: crypto.randomUUID(),\n                type: shapeType,\n                transform,\n                style,\n                content: content || undefined\n            };\n        } catch (error) {\n            console.error(\"Error extracting basic shape:\", error);\n            return null;\n        }\n    }\n    extractTransform(spPr) {\n        // Debug the spPr element structure\n        console.log(\"Extracting transform from spPr:\", spPr.outerHTML.substring(0, 500) + \"...\");\n        // Try to find xfrm element with better namespace handling\n        let xfrm = spPr.getElementsByTagName(\"xfrm\")[0];\n        if (!xfrm) {\n            // Try with namespace prefixes\n            xfrm = spPr.getElementsByTagName(\"a:xfrm\")[0];\n        }\n        if (!xfrm) {\n            // Try searching by partial tag name\n            const allElements = spPr.getElementsByTagName(\"*\");\n            for(let i = 0; i < allElements.length; i++){\n                const el = allElements[i];\n                if (el.tagName.includes(\"xfrm\")) {\n                    xfrm = el;\n                    break;\n                }\n            }\n        }\n        console.log(\"Found xfrm element:\", xfrm === null || xfrm === void 0 ? void 0 : xfrm.outerHTML);\n        if (xfrm) {\n            // Find offset, extent, and rotation with better namespace handling\n            let off = xfrm.getElementsByTagName(\"off\")[0];\n            if (!off) off = xfrm.getElementsByTagName(\"a:off\")[0];\n            let ext = xfrm.getElementsByTagName(\"ext\")[0];\n            if (!ext) ext = xfrm.getElementsByTagName(\"a:ext\")[0];\n            let rot = xfrm.getElementsByTagName(\"rot\")[0];\n            if (!rot) rot = xfrm.getElementsByTagName(\"a:rot\")[0];\n            console.log(\"Transform elements - off:\", off === null || off === void 0 ? void 0 : off.outerHTML, \"ext:\", ext === null || ext === void 0 ? void 0 : ext.outerHTML, \"rot:\", rot === null || rot === void 0 ? void 0 : rot.outerHTML);\n            // Convert EMUs to pixels with better scaling\n            // 1 EMU = 1/914400 inch, 1 inch = 96 pixels (standard DPI)\n            // So 1 EMU = 96/914400 = 0.000105 pixels\n            // For better visibility, we'll scale this up\n            const emuToPixel = 96 / 914400;\n            const scaleFactor = 1 // Adjust this to make shapes bigger/smaller\n            ;\n            const left = parseInt((off === null || off === void 0 ? void 0 : off.getAttribute(\"x\")) || \"0\") * emuToPixel * scaleFactor;\n            const top = parseInt((off === null || off === void 0 ? void 0 : off.getAttribute(\"y\")) || \"0\") * emuToPixel * scaleFactor;\n            const width = parseInt((ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cx\")) || \"1000000\") * emuToPixel * scaleFactor;\n            const height = parseInt((ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cy\")) || \"1000000\") * emuToPixel * scaleFactor;\n            const angle = parseInt((rot === null || rot === void 0 ? void 0 : rot.getAttribute(\"val\")) || \"0\") / 60000 // Convert 60kths to degrees\n            ;\n            const transform = {\n                left: Math.max(0, left),\n                top: Math.max(0, top),\n                width: Math.max(50, width),\n                height: Math.max(50, height),\n                angle,\n                scaleX: 1,\n                scaleY: 1,\n                flipX: false,\n                flipY: false\n            };\n            console.log(\"Extracted transform (EMU values):\", {\n                emuLeft: off === null || off === void 0 ? void 0 : off.getAttribute(\"x\"),\n                emuTop: off === null || off === void 0 ? void 0 : off.getAttribute(\"y\"),\n                emuWidth: ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cx\"),\n                emuHeight: ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cy\")\n            });\n            console.log(\"Converted transform (pixels):\", transform);\n            return transform;\n        }\n        console.warn(\"No xfrm found, using default transform\");\n        return {\n            left: 100,\n            top: 100,\n            width: 200,\n            height: 150,\n            angle: 0,\n            scaleX: 1,\n            scaleY: 1,\n            flipX: false,\n            flipY: false\n        };\n    }\n    extractTextContent(textBox) {\n        // Try multiple approaches to find text content\n        let content = \"\";\n        // First try: look for text in txBody > p > r > t\n        const txBody = this.findElementByTagName(textBox, \"txBody\");\n        if (txBody) {\n            const paragraphs = this.findElementsByTagName(txBody, \"p\");\n            console.log(\"Found \".concat(paragraphs.length, \" paragraphs in text box\"));\n            for(let i = 0; i < paragraphs.length; i++){\n                const paragraph = paragraphs[i];\n                const textRuns = this.findElementsByTagName(paragraph, \"r\");\n                console.log(\"Paragraph \".concat(i + 1, \" has \").concat(textRuns.length, \" text runs\"));\n                let paragraphText = \"\";\n                for(let j = 0; j < textRuns.length; j++){\n                    const textRun = textRuns[j];\n                    const textElement = this.findElementByTagName(textRun, \"t\");\n                    if (textElement && textElement.textContent) {\n                        paragraphText += textElement.textContent;\n                        console.log(\"Text run \".concat(j + 1, ': \"').concat(textElement.textContent, '\"'));\n                    }\n                }\n                // Add paragraph text to content\n                if (paragraphText) {\n                    if (content) content += \"\\n\" // Add line break between paragraphs\n                    ;\n                    content += paragraphText;\n                }\n            }\n        }\n        // Second try: look for text directly in the textBox\n        if (!content) {\n            const textElements = this.findElementsByTagName(textBox, \"t\");\n            console.log(\"Found \".concat(textElements.length, \" text elements directly in text box\"));\n            for(let i = 0; i < textElements.length; i++){\n                const element = textElements[i];\n                if (element.textContent) {\n                    if (content) content += \"\\n\";\n                    content += element.textContent;\n                    console.log(\"Direct text element \".concat(i + 1, ': \"').concat(element.textContent, '\"'));\n                }\n            }\n        }\n        // Third try: look for any text content in the element\n        if (!content) {\n            content = textBox.textContent || \"\";\n            console.log('Fallback text content: \"'.concat(content, '\"'));\n        }\n        console.log('Final extracted text content: \"'.concat(content, '\"'));\n        return content || \"Text Box\";\n    }\n    extractTextStyle(textBox) {\n        const defRPr = this.findElementByTagName(textBox, \"defRPr\");\n        if (defRPr) {\n            return {\n                fontFamily: defRPr.getAttribute(\"typeface\") || \"Arial\",\n                fontSize: parseInt(defRPr.getAttribute(\"sz\") || \"1800\") / 100,\n                fontWeight: defRPr.getAttribute(\"b\") === \"1\" ? \"bold\" : \"normal\",\n                fontStyle: defRPr.getAttribute(\"i\") === \"1\" ? \"italic\" : \"normal\",\n                textDecoration: defRPr.getAttribute(\"u\") === \"1\" ? \"underline\" : \"none\",\n                color: this.extractColor(defRPr),\n                textAlign: \"left\",\n                lineHeight: 1.2\n            };\n        }\n        return {\n            fontFamily: \"Arial\",\n            fontSize: 18,\n            fontWeight: \"normal\",\n            fontStyle: \"normal\",\n            textDecoration: \"none\",\n            color: \"#000000\",\n            textAlign: \"left\",\n            lineHeight: 1.2\n        };\n    }\n    extractColor(defRPr) {\n        const solidFill = this.findElementByTagName(defRPr, \"solidFill\");\n        if (solidFill) {\n            const srgbClr = this.findElementByTagName(solidFill, \"srgbClr\");\n            if (srgbClr) {\n                const val = srgbClr.getAttribute(\"val\");\n                if (val) {\n                    return \"#\".concat(val);\n                }\n            }\n        }\n        return \"#000000\";\n    }\n    determineShapeType(spPr) {\n        // Try to find prstGeom element with better namespace handling\n        let prstGeom = spPr.getElementsByTagName(\"prstGeom\")[0];\n        if (!prstGeom) {\n            prstGeom = spPr.getElementsByTagName(\"a:prstGeom\")[0];\n        }\n        if (prstGeom) {\n            const prst = prstGeom.getAttribute(\"prst\");\n            console.log(\"Found shape type: \".concat(prst));\n            switch(prst){\n                case \"rect\":\n                case \"roundRect\":\n                    return \"rectangle\";\n                case \"ellipse\":\n                case \"oval\":\n                    return \"ellipse\";\n                case \"line\":\n                case \"straightConnector1\":\n                    return \"line\";\n                default:\n                    console.log(\"Unknown shape type: \".concat(prst, \", defaulting to rectangle\"));\n                    return \"rectangle\";\n            }\n        }\n        // If no prstGeom found, try to determine from other properties\n        console.log(\"No prstGeom found, defaulting to rectangle\");\n        return \"rectangle\";\n    }\n    createDefaultSlide() {\n        return {\n            id: crypto.randomUUID(),\n            name: \"Slide 1\",\n            width: 960,\n            height: 540,\n            objects: [\n                {\n                    id: crypto.randomUUID(),\n                    type: \"text\",\n                    transform: {\n                        left: 100,\n                        top: 100,\n                        width: 300,\n                        height: 100,\n                        angle: 0,\n                        scaleX: 1,\n                        scaleY: 1,\n                        flipX: false,\n                        flipY: false\n                    },\n                    style: {\n                        fontFamily: \"Arial\",\n                        fontSize: 24,\n                        fontWeight: \"bold\",\n                        color: \"#000000\",\n                        textAlign: \"left\"\n                    },\n                    content: \"Welcome to PPTX Editor\"\n                }\n            ]\n        };\n    }\n    extractIndividualTextElements(textBox, slideNumber, shapeIndex) {\n        const textObjects = [];\n        try {\n            const txBody = this.findElementByTagName(textBox, \"txBody\");\n            if (!txBody) return textObjects;\n            // Get the base transform from the shape\n            const spPr = this.findElementByTagName(textBox, \"spPr\");\n            const baseTransform = spPr ? this.extractTransform(spPr) : {\n                left: 100,\n                top: 100,\n                width: 300,\n                height: 150,\n                angle: 0,\n                scaleX: 1,\n                scaleY: 1,\n                flipX: false,\n                flipY: false\n            };\n            const paragraphs = this.findElementsByTagName(txBody, \"p\");\n            console.log(\"Extracting \".concat(paragraphs.length, \" individual text elements from shape \").concat(shapeIndex + 1));\n            for(let i = 0; i < paragraphs.length; i++){\n                const paragraph = paragraphs[i];\n                const textRuns = this.findElementsByTagName(paragraph, \"r\");\n                for(let j = 0; j < textRuns.length; j++){\n                    const textRun = textRuns[j];\n                    const textElement = this.findElementByTagName(textRun, \"t\");\n                    if (textElement && textElement.textContent && textElement.textContent.trim()) {\n                        const textContent = textElement.textContent.trim();\n                        console.log('Creating individual text object: \"'.concat(textContent, '\"'));\n                        // Get text style from this specific run\n                        const rPr = this.findElementByTagName(textRun, \"rPr\");\n                        const textStyle = rPr ? this.extractTextStyleFromRun(rPr) : this.extractTextStyle(textBox);\n                        // Calculate position based on paragraph and text run index\n                        // This creates a more natural text layout\n                        const textLeft = baseTransform.left + i * 10;\n                        const textTop = baseTransform.top + i * 30 + j * 20;\n                        const textWidth = Math.max(200, textContent.length * 8) // Width based on text length\n                        ;\n                        const textHeight = 30;\n                        // Create a separate text object for this text element\n                        const textObject = {\n                            id: crypto.randomUUID(),\n                            type: \"text\",\n                            transform: {\n                                left: textLeft,\n                                top: textTop,\n                                width: textWidth,\n                                height: textHeight,\n                                angle: baseTransform.angle,\n                                scaleX: baseTransform.scaleX,\n                                scaleY: baseTransform.scaleY,\n                                flipX: baseTransform.flipX,\n                                flipY: baseTransform.flipY\n                            },\n                            style: textStyle,\n                            content: textContent\n                        };\n                        textObjects.push(textObject);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error extracting individual text elements:\", error);\n        }\n        return textObjects;\n    }\n    extractTextStyleFromRun(rPr) {\n        return {\n            fontFamily: rPr.getAttribute(\"typeface\") || \"Arial\",\n            fontSize: parseInt(rPr.getAttribute(\"sz\") || \"1800\") / 100,\n            fontWeight: rPr.getAttribute(\"b\") === \"1\" ? \"bold\" : \"normal\",\n            fontStyle: rPr.getAttribute(\"i\") === \"1\" ? \"italic\" : \"normal\",\n            textDecoration: rPr.getAttribute(\"u\") === \"1\" ? \"underline\" : \"none\",\n            color: this.extractColor(rPr),\n            textAlign: \"left\",\n            lineHeight: 1.2\n        };\n    }\n    constructor(){\n        this.zip = null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/pptxParser.ts\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/pptxParser.ts":
/*!*********************************!*\
  !*** ./src/utils/pptxParser.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PPTXParser: function() { return /* binding */ PPTXParser; }\n/* harmony export */ });\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jszip */ \"(app-pages-browser)/./node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_0__);\n\nclass PPTXParser {\n    async parseFile(file) {\n        try {\n            console.log(\"Starting PPTX parsing...\");\n            // Load the ZIP file\n            this.zip = await jszip__WEBPACK_IMPORTED_MODULE_0___default().loadAsync(file);\n            console.log(\"ZIP file loaded successfully\");\n            // List all files for debugging\n            const fileNames = Object.keys(this.zip.files);\n            console.log(\"Files in ZIP:\", fileNames);\n            // Parse the document\n            const slides = await this.readSlides();\n            const properties = await this.readPresentationProps();\n            console.log(\"Parsing completed successfully\");\n            return {\n                id: crypto.randomUUID(),\n                name: file.name.replace(\".pptx\", \"\"),\n                slides,\n                metadata: properties\n            };\n        } catch (error) {\n            console.error(\"Error parsing PPTX file:\", error);\n            throw error;\n        }\n    }\n    async readPresentationProps() {\n        try {\n            var _this_zip;\n            const coreProps = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(\"docProps/core.xml\");\n            if (coreProps) {\n                const content = await coreProps.async(\"text\");\n                const parser = new DOMParser();\n                const xml = parser.parseFromString(content, \"text/xml\");\n                const authorElement = xml.querySelector(\"dc\\\\:creator, creator\");\n                return {\n                    author: (authorElement === null || authorElement === void 0 ? void 0 : authorElement.textContent) || undefined\n                };\n            }\n        } catch (error) {\n            console.warn(\"Could not read presentation properties:\", error);\n        }\n        return {};\n    }\n    async readSlides() {\n        const slides = [];\n        try {\n            var _this_zip;\n            // Get slide count from presentation.xml\n            const presentation = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(\"ppt/presentation.xml\");\n            if (presentation) {\n                const content = await presentation.async(\"text\");\n                console.log(\"Presentation XML content:\", content.substring(0, 500) + \"...\");\n                const parser = new DOMParser();\n                const xml = parser.parseFromString(content, \"text/xml\");\n                // Try multiple approaches to find slides\n                let slideIds = xml.getElementsByTagName(\"sldId\");\n                console.log(\"Found \".concat(slideIds.length, \" slides using 'sldId' tag\"));\n                // If no slides found, try alternative approaches\n                if (slideIds.length === 0) {\n                    var _this_zip1;\n                    // Try looking for slides in the slides folder directly\n                    const slideFiles = Object.keys(((_this_zip1 = this.zip) === null || _this_zip1 === void 0 ? void 0 : _this_zip1.files) || {}).filter((name)=>name.startsWith(\"ppt/slides/slide\") && name.endsWith(\".xml\")).sort();\n                    console.log(\"Found slide files directly:\", slideFiles);\n                    if (slideFiles.length > 0) {\n                        // Create slides from the files we found\n                        for(let i = 0; i < slideFiles.length; i++){\n                            const slideFile = slideFiles[i];\n                            const slideNumber = i + 1;\n                            console.log(\"Processing slide file: \".concat(slideFile));\n                            const slide = await this.readSlideFromFile(slideFile, slideNumber);\n                            if (slide) {\n                                slides.push(slide);\n                                console.log(\"Successfully loaded slide \".concat(slideNumber, \" from file\"));\n                            }\n                        }\n                    }\n                } else {\n                    // Process slides using the traditional method\n                    for(let i = 0; i < slideIds.length; i++){\n                        const slideId = slideIds[i].getAttribute(\"r:id\");\n                        console.log(\"Processing slide \".concat(i + 1, \" with ID: \").concat(slideId));\n                        if (slideId) {\n                            const slide = await this.readSlide(slideId, i + 1);\n                            if (slide) {\n                                slides.push(slide);\n                                console.log(\"Successfully loaded slide \".concat(i + 1));\n                            } else {\n                                console.warn(\"Failed to load slide \".concat(i + 1));\n                            }\n                        }\n                    }\n                }\n            } else {\n                console.warn(\"Could not find presentation.xml\");\n            }\n        } catch (error) {\n            console.error(\"Error reading slides:\", error);\n            // Create a default slide if parsing fails\n            slides.push(this.createDefaultSlide());\n        }\n        console.log(\"Total slides loaded: \".concat(slides.length));\n        return slides.length > 0 ? slides : [\n            this.createDefaultSlide()\n        ];\n    }\n    async readSlide(slideId, slideNumber) {\n        try {\n            var _this_zip;\n            // Try to find the slide file directly first\n            let slideFile = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(\"ppt/slides/slide\".concat(slideNumber, \".xml\"));\n            // If not found, try to find it through relationships\n            if (!slideFile) {\n                var _this_zip1;\n                const slideRel = (_this_zip1 = this.zip) === null || _this_zip1 === void 0 ? void 0 : _this_zip1.file(\"ppt/slides/_rels/slide\".concat(slideNumber, \".xml.rels\"));\n                if (slideRel) {\n                    var _relXml_querySelector;\n                    const relContent = await slideRel.async(\"text\");\n                    const relParser = new DOMParser();\n                    const relXml = relParser.parseFromString(relContent, \"text/xml\");\n                    const slideTarget = (_relXml_querySelector = relXml.querySelector('Relationship[Id=\"'.concat(slideId, '\"]'))) === null || _relXml_querySelector === void 0 ? void 0 : _relXml_querySelector.getAttribute(\"Target\");\n                    if (slideTarget) {\n                        var _this_zip2;\n                        const slidePath = \"ppt/slides/\".concat(slideTarget.split(\"/\").pop());\n                        slideFile = (_this_zip2 = this.zip) === null || _this_zip2 === void 0 ? void 0 : _this_zip2.file(slidePath);\n                    }\n                }\n            }\n            // If still not found, try to find any slide file\n            if (!slideFile) {\n                var _this_zip3;\n                const slideFiles = Object.keys(((_this_zip3 = this.zip) === null || _this_zip3 === void 0 ? void 0 : _this_zip3.files) || {}).filter((name)=>name.startsWith(\"ppt/slides/slide\") && name.endsWith(\".xml\")).sort();\n                if (slideFiles.length > 0) {\n                    var _this_zip4;\n                    const targetSlide = slideFiles[slideNumber - 1] || slideFiles[0];\n                    slideFile = (_this_zip4 = this.zip) === null || _this_zip4 === void 0 ? void 0 : _this_zip4.file(targetSlide);\n                }\n            }\n            if (!slideFile) {\n                console.warn(\"Could not find slide file for slide \".concat(slideNumber));\n                return null;\n            }\n            const slideContent = await slideFile.async(\"text\");\n            const slideParser = new DOMParser();\n            const slideXml = slideParser.parseFromString(slideContent, \"text/xml\");\n            // Extract slide dimensions\n            const sldSz = slideXml.getElementsByTagName(\"sldSz\")[0];\n            const width = parseInt((sldSz === null || sldSz === void 0 ? void 0 : sldSz.getAttribute(\"cx\")) || \"9144000\") / 12700 // Convert EMUs to pixels\n            ;\n            const height = parseInt((sldSz === null || sldSz === void 0 ? void 0 : sldSz.getAttribute(\"cy\")) || \"6858000\") / 12700;\n            // Extract shapes\n            const objects = await this.extractShapes(slideXml, slideNumber);\n            return {\n                id: crypto.randomUUID(),\n                name: \"Slide \".concat(slideNumber),\n                width,\n                height,\n                objects\n            };\n        } catch (error) {\n            console.error(\"Error reading slide \".concat(slideNumber, \":\"), error);\n            return null;\n        }\n    }\n    async readSlideFromFile(slideFilePath, slideNumber) {\n        try {\n            var _this_zip;\n            const slideFile = (_this_zip = this.zip) === null || _this_zip === void 0 ? void 0 : _this_zip.file(slideFilePath);\n            if (!slideFile) {\n                console.warn(\"Could not find slide file: \".concat(slideFilePath));\n                return null;\n            }\n            const slideContent = await slideFile.async(\"text\");\n            console.log(\"Slide \".concat(slideNumber, \" XML content:\"), slideContent.substring(0, 1000) + \"...\");\n            const slideParser = new DOMParser();\n            const slideXml = slideParser.parseFromString(slideContent, \"text/xml\");\n            // Extract slide dimensions\n            const sldSz = slideXml.getElementsByTagName(\"sldSz\")[0];\n            const width = parseInt((sldSz === null || sldSz === void 0 ? void 0 : sldSz.getAttribute(\"cx\")) || \"9144000\") / 12700 // Convert EMUs to pixels\n            ;\n            const height = parseInt((sldSz === null || sldSz === void 0 ? void 0 : sldSz.getAttribute(\"cy\")) || \"6858000\") / 12700;\n            // Extract shapes\n            const objects = await this.extractShapes(slideXml, slideNumber);\n            return {\n                id: crypto.randomUUID(),\n                name: \"Slide \".concat(slideNumber),\n                width,\n                height,\n                objects\n            };\n        } catch (error) {\n            console.error(\"Error reading slide from file \".concat(slideFilePath, \":\"), error);\n            return null;\n        }\n    }\n    async extractShapes(slideXml, slideNumber) {\n        const objects = [];\n        try {\n            console.log(\"Extracting shapes from slide \".concat(slideNumber));\n            // Try multiple approaches to find shapes\n            // Approach 1: Look for spTree > sp (traditional structure)\n            // Use a more robust approach to handle namespaces\n            let spTree = this.findElementByTagName(slideXml, \"spTree\");\n            if (spTree) {\n                const textBoxes = this.findElementsByTagName(spTree, \"sp\");\n                console.log(\"Found \".concat(textBoxes.length, \" shape elements in spTree\"));\n                for(let i = 0; i < textBoxes.length; i++){\n                    const textBox = textBoxes[i];\n                    console.log(\"Processing shape \".concat(i + 1, \":\"), textBox.tagName, textBox.getAttribute(\"id\"), textBox.getAttribute(\"name\"));\n                    // Check if this is a placeholder\n                    const nvPr = this.findElementByTagName(textBox, \"nvPr\");\n                    const ph = nvPr ? this.findElementByTagName(nvPr, \"ph\") : null;\n                    if (ph) {\n                        const phType = ph.getAttribute(\"type\");\n                        console.log(\"Shape \".concat(i + 1, \" is a placeholder of type: \").concat(phType));\n                    }\n                    const shape = this.extractTextBox(textBox, slideNumber, i);\n                    if (shape) {\n                        objects.push(shape);\n                        console.log(\"Successfully extracted shape \".concat(i + 1, \":\"), shape.type, shape.content || \"no content\");\n                    } else {\n                        console.warn(\"Failed to extract shape \".concat(i + 1));\n                    }\n                }\n            } else {\n                console.warn(\"No spTree found in slide\");\n            }\n            // Approach 2: Look for shapes directly in the slide\n            if (objects.length === 0) {\n                console.log(\"Trying alternative shape extraction...\");\n                // Look for any sp elements anywhere in the slide\n                const allSpElements = this.findElementsByTagName(slideXml, \"sp\");\n                console.log(\"Found \".concat(allSpElements.length, \" sp elements in slide\"));\n                for(let i = 0; i < allSpElements.length; i++){\n                    const spElement = allSpElements[i];\n                    console.log(\"Processing sp element \".concat(i + 1, \":\"), spElement.tagName, spElement.getAttribute(\"id\"));\n                    const shape = this.extractTextBox(spElement, slideNumber, i);\n                    if (shape) {\n                        objects.push(shape);\n                        console.log(\"Successfully extracted sp element \".concat(i + 1, \":\"), shape.type, shape.content || \"no content\");\n                    }\n                }\n            }\n            // Approach 3: Look for text elements directly\n            if (objects.length === 0) {\n                console.log(\"Trying direct text extraction...\");\n                const textElements = this.findElementsByTagName(slideXml, \"t\");\n                console.log(\"Found \".concat(textElements.length, \" text elements directly in slide\"));\n                if (textElements.length > 0) {\n                    // Create a simple text object from the first text element\n                    const firstText = textElements[0];\n                    const textContent = firstText.textContent || \"Text\";\n                    console.log('Creating text object with content: \"'.concat(textContent, '\"'));\n                    const textObject = {\n                        id: crypto.randomUUID(),\n                        type: \"text\",\n                        transform: {\n                            left: 100,\n                            top: 100,\n                            width: 300,\n                            height: 100,\n                            angle: 0,\n                            scaleX: 1,\n                            scaleY: 1,\n                            flipX: false,\n                            flipY: false\n                        },\n                        style: {\n                            fontFamily: \"Arial\",\n                            fontSize: 18,\n                            fontWeight: \"normal\",\n                            fontStyle: \"normal\",\n                            textDecoration: \"none\",\n                            color: \"#000000\",\n                            textAlign: \"left\",\n                            lineHeight: 1.2\n                        },\n                        content: textContent\n                    };\n                    objects.push(textObject);\n                    console.log(\"Created fallback text object\");\n                }\n            }\n            // Extract images\n            const images = this.findElementsByTagName(slideXml, \"pic\");\n            console.log(\"Found \".concat(images.length, \" image elements\"));\n            for(let i = 0; i < images.length; i++){\n                const image = images[i];\n                const shape = this.extractImage(image, slideNumber, i);\n                if (shape) {\n                    objects.push(shape);\n                    console.log(\"Successfully extracted image \".concat(i + 1));\n                }\n            }\n            console.log(\"Total objects extracted: \".concat(objects.length));\n            console.log(\"Final objects:\", objects.map((obj)=>({\n                    type: obj.type,\n                    content: obj.content,\n                    transform: obj.transform\n                })));\n        } catch (error) {\n            console.error(\"Error extracting shapes:\", error);\n        }\n        return objects;\n    }\n    // Helper methods to handle XML namespaces\n    findElementByTagName(parent, tagName) {\n        // Try multiple approaches to find the element\n        let element = parent.getElementsByTagName(tagName)[0];\n        if (element) return element;\n        // If not found, try with common namespace prefixes\n        const prefixes = [\n            \"p:\",\n            \"a:\",\n            \"r:\",\n            \"\"\n        ];\n        for (const prefix of prefixes){\n            const fullTagName = prefix + tagName;\n            element = parent.getElementsByTagName(fullTagName)[0];\n            if (element) return element;\n        }\n        // Last resort: search by partial tag name\n        const allElements = parent.getElementsByTagName(\"*\");\n        for(let i = 0; i < allElements.length; i++){\n            const el = allElements[i];\n            if (el.tagName.endsWith(tagName) || el.tagName.includes(tagName)) {\n                return el;\n            }\n        }\n        return null;\n    }\n    findElementsByTagName(parent, tagName) {\n        // Try multiple approaches to find elements\n        let elements = Array.from(parent.getElementsByTagName(tagName));\n        if (elements.length > 0) return elements;\n        // If not found, try with common namespace prefixes\n        const prefixes = [\n            \"p:\",\n            \"a:\",\n            \"r:\",\n            \"\"\n        ];\n        for (const prefix of prefixes){\n            const fullTagName = prefix + tagName;\n            elements = Array.from(parent.getElementsByTagName(fullTagName));\n            if (elements.length > 0) return elements;\n        }\n        // Last resort: search by partial tag name\n        const allElements = parent.getElementsByTagName(\"*\");\n        const matchingElements = [];\n        for(let i = 0; i < allElements.length; i++){\n            const el = allElements[i];\n            if (el.tagName.endsWith(tagName) || el.tagName.includes(tagName)) {\n                matchingElements.push(el);\n            }\n        }\n        return matchingElements;\n    }\n    extractTextBox(textBox, slideNumber, index) {\n        try {\n            console.log(\"Extracting text box \".concat(index + 1, \" from slide \").concat(slideNumber));\n            console.log(\"Text box element:\", textBox.outerHTML.substring(0, 500) + \"...\");\n            const spPr = this.findElementByTagName(textBox, \"spPr\");\n            if (!spPr) {\n                console.warn(\"No spPr found in text box \".concat(index + 1));\n                return null;\n            }\n            // Check if this is actually a text shape or a different type\n            const txBody = this.findElementByTagName(textBox, \"txBody\");\n            const hasText = txBody && this.findElementsByTagName(txBody, \"t\").length > 0;\n            // Check if this is a placeholder or shape with text\n            const nvPr = this.findElementByTagName(textBox, \"nvPr\");\n            const ph = nvPr ? this.findElementByTagName(nvPr, \"ph\") : null;\n            const isPlaceholder = ph && ph.getAttribute(\"type\");\n            // Check the actual shape type from spPr\n            const prstGeom = spPr.getElementsByTagName(\"prstGeom\")[0] || spPr.getElementsByTagName(\"a:prstGeom\")[0];\n            const shapeType = prstGeom === null || prstGeom === void 0 ? void 0 : prstGeom.getAttribute(\"prst\");\n            console.log(\"Shape \".concat(index + 1, \" - hasText: \").concat(hasText, \", isPlaceholder: \").concat(isPlaceholder, \", shapeType: \").concat(shapeType));\n            // If this is a rectangle, ellipse, or other shape (not text), extract as basic shape\n            if (shapeType && [\n                \"rect\",\n                \"roundRect\",\n                \"ellipse\",\n                \"oval\",\n                \"line\"\n            ].includes(shapeType)) {\n                console.log(\"Shape \".concat(index + 1, \" is a \").concat(shapeType, \", treating as basic shape\"));\n                return this.extractBasicShape(textBox, slideNumber, index);\n            }\n            // If this has no text and is not a placeholder, treat as basic shape\n            if (!hasText && !isPlaceholder) {\n                console.log(\"Shape \".concat(index + 1, \" has no text and is not a placeholder, treating as basic shape\"));\n                return this.extractBasicShape(textBox, slideNumber, index);\n            }\n            const transform = this.extractTransform(spPr);\n            const textContent = this.extractTextContent(textBox);\n            const textStyle = this.extractTextStyle(textBox);\n            console.log('Extracted text box: content=\"'.concat(textContent, '\", transform='), transform);\n            return {\n                id: crypto.randomUUID(),\n                type: \"text\",\n                transform,\n                style: textStyle,\n                content: textContent\n            };\n        } catch (error) {\n            console.error(\"Error extracting text box:\", error);\n            return null;\n        }\n    }\n    extractImage(image, slideNumber, index) {\n        try {\n            const spPr = this.findElementByTagName(image, \"spPr\");\n            if (!spPr) return null;\n            const transform = this.extractTransform(spPr);\n            // For now, we'll create a placeholder image\n            // In a real implementation, you'd extract the actual image data\n            return {\n                id: crypto.randomUUID(),\n                type: \"image\",\n                transform,\n                style: {},\n                src: \"data:image/svg+xml;base64,\".concat(btoa('<svg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"100\" height=\"100\" fill=\"#ccc\"/><text x=\"50\" y=\"50\" text-anchor=\"middle\" dy=\".3em\">Image</text></svg>'))\n            };\n        } catch (error) {\n            console.error(\"Error extracting image:\", error);\n            return null;\n        }\n    }\n    extractBasicShape(shape, slideNumber, index) {\n        try {\n            console.log(\"Extracting basic shape \".concat(index + 1, \" from slide \").concat(slideNumber));\n            const spPr = this.findElementByTagName(shape, \"spPr\");\n            if (!spPr) {\n                console.warn(\"No spPr found in basic shape \".concat(index + 1));\n                return null;\n            }\n            const transform = this.extractTransform(spPr);\n            const shapeType = this.determineShapeType(spPr);\n            console.log(\"Extracted basic shape: type=\".concat(shapeType, \", transform=\"), transform);\n            // For basic shapes, we might still have some text content (like placeholders)\n            let content = \"\";\n            const txBody = this.findElementByTagName(shape, \"txBody\");\n            if (txBody) {\n                content = this.extractTextContent(shape);\n            }\n            // Check if this is a placeholder\n            const nvPr = this.findElementByTagName(shape, \"nvPr\");\n            const ph = nvPr ? this.findElementByTagName(nvPr, \"ph\") : null;\n            if (ph) {\n                const phType = ph.getAttribute(\"type\");\n                if (phType === \"title\") {\n                    content = \"Title Placeholder\";\n                } else if (phType === \"body\") {\n                    content = \"Body Placeholder\";\n                } else {\n                    content = \"Content Placeholder\";\n                }\n            }\n            return {\n                id: crypto.randomUUID(),\n                type: shapeType,\n                transform,\n                style: {\n                    fill: \"#e5e7eb\",\n                    stroke: \"#6b7280\",\n                    strokeWidth: 1\n                },\n                content: content || undefined\n            };\n        } catch (error) {\n            console.error(\"Error extracting basic shape:\", error);\n            return null;\n        }\n    }\n    extractTransform(spPr) {\n        // Debug the spPr element structure\n        console.log(\"Extracting transform from spPr:\", spPr.outerHTML.substring(0, 500) + \"...\");\n        // Try to find xfrm element with better namespace handling\n        let xfrm = spPr.getElementsByTagName(\"xfrm\")[0];\n        if (!xfrm) {\n            // Try with namespace prefixes\n            xfrm = spPr.getElementsByTagName(\"a:xfrm\")[0];\n        }\n        if (!xfrm) {\n            // Try searching by partial tag name\n            const allElements = spPr.getElementsByTagName(\"*\");\n            for(let i = 0; i < allElements.length; i++){\n                const el = allElements[i];\n                if (el.tagName.includes(\"xfrm\")) {\n                    xfrm = el;\n                    break;\n                }\n            }\n        }\n        console.log(\"Found xfrm element:\", xfrm === null || xfrm === void 0 ? void 0 : xfrm.outerHTML);\n        if (xfrm) {\n            // Find offset, extent, and rotation with better namespace handling\n            let off = xfrm.getElementsByTagName(\"off\")[0];\n            if (!off) off = xfrm.getElementsByTagName(\"a:off\")[0];\n            let ext = xfrm.getElementsByTagName(\"ext\")[0];\n            if (!ext) ext = xfrm.getElementsByTagName(\"a:ext\")[0];\n            let rot = xfrm.getElementsByTagName(\"rot\")[0];\n            if (!rot) rot = xfrm.getElementsByTagName(\"a:rot\")[0];\n            console.log(\"Transform elements - off:\", off === null || off === void 0 ? void 0 : off.outerHTML, \"ext:\", ext === null || ext === void 0 ? void 0 : ext.outerHTML, \"rot:\", rot === null || rot === void 0 ? void 0 : rot.outerHTML);\n            // Convert EMUs to pixels with better scaling\n            // 1 EMU = 1/914400 inch, 1 inch = 96 pixels (standard DPI)\n            // So 1 EMU = 96/914400 = 0.000105 pixels\n            // For better visibility, we'll scale this up\n            const emuToPixel = 96 / 914400;\n            const scaleFactor = 1 // Adjust this to make shapes bigger/smaller\n            ;\n            const left = parseInt((off === null || off === void 0 ? void 0 : off.getAttribute(\"x\")) || \"0\") * emuToPixel * scaleFactor;\n            const top = parseInt((off === null || off === void 0 ? void 0 : off.getAttribute(\"y\")) || \"0\") * emuToPixel * scaleFactor;\n            const width = parseInt((ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cx\")) || \"1000000\") * emuToPixel * scaleFactor;\n            const height = parseInt((ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cy\")) || \"1000000\") * emuToPixel * scaleFactor;\n            const angle = parseInt((rot === null || rot === void 0 ? void 0 : rot.getAttribute(\"val\")) || \"0\") / 60000 // Convert 60kths to degrees\n            ;\n            const transform = {\n                left: Math.max(0, left),\n                top: Math.max(0, top),\n                width: Math.max(50, width),\n                height: Math.max(50, height),\n                angle,\n                scaleX: 1,\n                scaleY: 1,\n                flipX: false,\n                flipY: false\n            };\n            console.log(\"Extracted transform (EMU values):\", {\n                emuLeft: off === null || off === void 0 ? void 0 : off.getAttribute(\"x\"),\n                emuTop: off === null || off === void 0 ? void 0 : off.getAttribute(\"y\"),\n                emuWidth: ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cx\"),\n                emuHeight: ext === null || ext === void 0 ? void 0 : ext.getAttribute(\"cy\")\n            });\n            console.log(\"Converted transform (pixels):\", transform);\n            return transform;\n        }\n        console.warn(\"No xfrm found, using default transform\");\n        return {\n            left: 100,\n            top: 100,\n            width: 200,\n            height: 150,\n            angle: 0,\n            scaleX: 1,\n            scaleY: 1,\n            flipX: false,\n            flipY: false\n        };\n    }\n    extractTextContent(textBox) {\n        // Try multiple approaches to find text content\n        let content = \"\";\n        // First try: look for text in txBody > p > r > t\n        const txBody = this.findElementByTagName(textBox, \"txBody\");\n        if (txBody) {\n            const paragraphs = this.findElementsByTagName(txBody, \"p\");\n            for(let i = 0; i < paragraphs.length; i++){\n                const paragraph = paragraphs[i];\n                const textRuns = this.findElementsByTagName(paragraph, \"r\");\n                for(let j = 0; j < textRuns.length; j++){\n                    const textRun = textRuns[j];\n                    const textElement = this.findElementByTagName(textRun, \"t\");\n                    if (textElement && textElement.textContent) {\n                        content += textElement.textContent;\n                    }\n                }\n                // Add line break between paragraphs\n                if (i < paragraphs.length - 1) {\n                    content += \"\\n\";\n                }\n            }\n        }\n        // Second try: look for text directly in the textBox\n        if (!content) {\n            const textElements = this.findElementsByTagName(textBox, \"t\");\n            for(let i = 0; i < textElements.length; i++){\n                const element = textElements[i];\n                if (element.textContent) {\n                    content += element.textContent;\n                }\n            }\n        }\n        // Third try: look for any text content in the element\n        if (!content) {\n            content = textBox.textContent || \"\";\n        }\n        console.log('Extracted text content: \"'.concat(content, '\"'));\n        return content || \"Text Box\";\n    }\n    extractTextStyle(textBox) {\n        const defRPr = this.findElementByTagName(textBox, \"defRPr\");\n        if (defRPr) {\n            return {\n                fontFamily: defRPr.getAttribute(\"typeface\") || \"Arial\",\n                fontSize: parseInt(defRPr.getAttribute(\"sz\") || \"1800\") / 100,\n                fontWeight: defRPr.getAttribute(\"b\") === \"1\" ? \"bold\" : \"normal\",\n                fontStyle: defRPr.getAttribute(\"i\") === \"1\" ? \"italic\" : \"normal\",\n                textDecoration: defRPr.getAttribute(\"u\") === \"1\" ? \"underline\" : \"none\",\n                color: this.extractColor(defRPr),\n                textAlign: \"left\",\n                lineHeight: 1.2\n            };\n        }\n        return {\n            fontFamily: \"Arial\",\n            fontSize: 18,\n            fontWeight: \"normal\",\n            fontStyle: \"normal\",\n            textDecoration: \"none\",\n            color: \"#000000\",\n            textAlign: \"left\",\n            lineHeight: 1.2\n        };\n    }\n    extractColor(defRPr) {\n        const solidFill = this.findElementByTagName(defRPr, \"solidFill\");\n        if (solidFill) {\n            const srgbClr = this.findElementByTagName(solidFill, \"srgbClr\");\n            if (srgbClr) {\n                const val = srgbClr.getAttribute(\"val\");\n                if (val) {\n                    return \"#\".concat(val);\n                }\n            }\n        }\n        return \"#000000\";\n    }\n    determineShapeType(spPr) {\n        // Try to find prstGeom element with better namespace handling\n        let prstGeom = spPr.getElementsByTagName(\"prstGeom\")[0];\n        if (!prstGeom) {\n            prstGeom = spPr.getElementsByTagName(\"a:prstGeom\")[0];\n        }\n        if (prstGeom) {\n            const prst = prstGeom.getAttribute(\"prst\");\n            console.log(\"Found shape type: \".concat(prst));\n            switch(prst){\n                case \"rect\":\n                case \"roundRect\":\n                    return \"rectangle\";\n                case \"ellipse\":\n                case \"oval\":\n                    return \"ellipse\";\n                case \"line\":\n                case \"straightConnector1\":\n                    return \"line\";\n                default:\n                    console.log(\"Unknown shape type: \".concat(prst, \", defaulting to rectangle\"));\n                    return \"rectangle\";\n            }\n        }\n        // If no prstGeom found, try to determine from other properties\n        console.log(\"No prstGeom found, defaulting to rectangle\");\n        return \"rectangle\";\n    }\n    createDefaultSlide() {\n        return {\n            id: crypto.randomUUID(),\n            name: \"Slide 1\",\n            width: 960,\n            height: 540,\n            objects: [\n                {\n                    id: crypto.randomUUID(),\n                    type: \"text\",\n                    transform: {\n                        left: 100,\n                        top: 100,\n                        width: 300,\n                        height: 100,\n                        angle: 0,\n                        scaleX: 1,\n                        scaleY: 1,\n                        flipX: false,\n                        flipY: false\n                    },\n                    style: {\n                        fontFamily: \"Arial\",\n                        fontSize: 24,\n                        fontWeight: \"bold\",\n                        color: \"#000000\",\n                        textAlign: \"left\"\n                    },\n                    content: \"Welcome to PPTX Editor\"\n                }\n            ]\n        };\n    }\n    constructor(){\n        this.zip = null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy91dGlscy9wcHR4UGFyc2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5QjtBQUdsQixNQUFNQztJQUdYLE1BQU1DLFVBQVVDLElBQVUsRUFBeUI7UUFDakQsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUM7WUFFWixvQkFBb0I7WUFDcEIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsTUFBTU4sc0RBQWUsQ0FBQ0c7WUFDakNDLFFBQVFDLEdBQUcsQ0FBQztZQUVaLCtCQUErQjtZQUMvQixNQUFNRyxZQUFZQyxPQUFPQyxJQUFJLENBQUMsSUFBSSxDQUFDSixHQUFHLENBQUNLLEtBQUs7WUFDNUNQLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUJHO1lBRTdCLHFCQUFxQjtZQUNyQixNQUFNSSxTQUFTLE1BQU0sSUFBSSxDQUFDQyxVQUFVO1lBQ3BDLE1BQU1DLGFBQWEsTUFBTSxJQUFJLENBQUNDLHFCQUFxQjtZQUVuRFgsUUFBUUMsR0FBRyxDQUFDO1lBRVosT0FBTztnQkFDTFcsSUFBSUMsT0FBT0MsVUFBVTtnQkFDckJDLE1BQU1oQixLQUFLZ0IsSUFBSSxDQUFDQyxPQUFPLENBQUMsU0FBUztnQkFDakNSO2dCQUNBUyxVQUFVUDtZQUNaO1FBQ0YsRUFBRSxPQUFPUSxPQUFPO1lBQ2RsQixRQUFRa0IsS0FBSyxDQUFDLDRCQUE0QkE7WUFDMUMsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBY1Asd0JBQXNEO1FBQ2xFLElBQUk7Z0JBQ2dCO1lBQWxCLE1BQU1RLGFBQVksZ0JBQUksQ0FBQ2pCLEdBQUcsY0FBUiwwQ0FBVUgsSUFBSSxDQUFDO1lBQ2pDLElBQUlvQixXQUFXO2dCQUNiLE1BQU1DLFVBQVUsTUFBTUQsVUFBVUUsS0FBSyxDQUFDO2dCQUN0QyxNQUFNQyxTQUFTLElBQUlDO2dCQUNuQixNQUFNQyxNQUFNRixPQUFPRyxlQUFlLENBQUNMLFNBQVM7Z0JBRTVDLE1BQU1NLGdCQUFnQkYsSUFBSUcsYUFBYSxDQUFDO2dC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QUNFcEssUUFBUUMsR0FBRyxDQUFDLHVCQUE0QixPQUFMbUssTUFBSztvQkFDeEMsT0FBTztZQUNYO1FBQ0Y7UUFFQSwrREFBK0Q7UUFDL0RwSyxRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPO0lBQ1Q7SUFFUWtELHFCQUE0QjtRQUNsQyxPQUFPO1lBQ0x2QyxJQUFJQyxPQUFPQyxVQUFVO1lBQ3JCQyxNQUFNO1lBQ05rRCxPQUFPO1lBQ1BFLFFBQVE7WUFDUkMsU0FBUztnQkFDUDtvQkFDRXhELElBQUlDLE9BQU9DLFVBQVU7b0JBQ3JCb0UsTUFBTTtvQkFDTk0sV0FBVzt3QkFDVEMsTUFBTTt3QkFDTkMsS0FBSzt3QkFDTHpCLE9BQU87d0JBQ1BFLFFBQVE7d0JBQ1J3QixPQUFPO3dCQUNQQyxRQUFRO3dCQUNSQyxRQUFRO3dCQUNSQyxPQUFPO3dCQUNQQyxPQUFPO29CQUNUO29CQUNBQyxPQUFPO3dCQUNMQyxZQUFZO3dCQUNaQyxVQUFVO3dCQUNWQyxZQUFZO3dCQUNaRyxPQUFPO3dCQUNQQyxXQUFXO29CQUNiO29CQUNBbkYsU0FBUztnQkFDWDthQUNEO1FBQ0g7SUFDRjs7YUE3dkJRbEIsTUFBb0I7O0FBOHZCOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL3BwdHhQYXJzZXIudHM/ZTE4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSlNaaXAgZnJvbSAnanN6aXAnXHJcbmltcG9ydCB7IFBQVFhEb2N1bWVudCwgU2xpZGUsIFNoYXBlT2JqZWN0LCBUcmFuc2Zvcm0sIFRleHRTdHlsZSB9IGZyb20gJ0AvdHlwZXMvcHB0eCdcclxuXHJcbmV4cG9ydCBjbGFzcyBQUFRYUGFyc2VyIHtcclxuICBwcml2YXRlIHppcDogSlNaaXAgfCBudWxsID0gbnVsbFxyXG5cclxuICBhc3luYyBwYXJzZUZpbGUoZmlsZTogRmlsZSk6IFByb21pc2U8UFBUWERvY3VtZW50PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgUFBUWCBwYXJzaW5nLi4uJylcclxuICAgICAgXHJcbiAgICAgIC8vIExvYWQgdGhlIFpJUCBmaWxlXHJcbiAgICAgIHRoaXMuemlwID0gYXdhaXQgSlNaaXAubG9hZEFzeW5jKGZpbGUpXHJcbiAgICAgIGNvbnNvbGUubG9nKCdaSVAgZmlsZSBsb2FkZWQgc3VjY2Vzc2Z1bGx5JylcclxuICAgICAgXHJcbiAgICAgIC8vIExpc3QgYWxsIGZpbGVzIGZvciBkZWJ1Z2dpbmdcclxuICAgICAgY29uc3QgZmlsZU5hbWVzID0gT2JqZWN0LmtleXModGhpcy56aXAuZmlsZXMpXHJcbiAgICAgIGNvbnNvbGUubG9nKCdGaWxlcyBpbiBaSVA6JywgZmlsZU5hbWVzKVxyXG4gICAgICBcclxuICAgICAgLy8gUGFyc2UgdGhlIGRvY3VtZW50XHJcbiAgICAgIGNvbnN0IHNsaWRlcyA9IGF3YWl0IHRoaXMucmVhZFNsaWRlcygpXHJcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBhd2FpdCB0aGlzLnJlYWRQcmVzZW50YXRpb25Qcm9wcygpXHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZygnUGFyc2luZyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5JylcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgICAgbmFtZTogZmlsZS5uYW1lLnJlcGxhY2UoJy5wcHR4JywgJycpLFxyXG4gICAgICAgIHNsaWRlcyxcclxuICAgICAgICBtZXRhZGF0YTogcHJvcGVydGllcyxcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBQUFRYIGZpbGU6JywgZXJyb3IpXHJcbiAgICAgIHRocm93IGVycm9yXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHJlYWRQcmVzZW50YXRpb25Qcm9wcygpOiBQcm9taXNlPHsgYXV0aG9yPzogc3RyaW5nIH0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGNvcmVQcm9wcyA9IHRoaXMuemlwPy5maWxlKCdkb2NQcm9wcy9jb3JlLnhtbCcpXHJcbiAgICAgIGlmIChjb3JlUHJvcHMpIHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgY29yZVByb3BzLmFzeW5jKCd0ZXh0JylcclxuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKClcclxuICAgICAgICBjb25zdCB4bWwgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGNvbnRlbnQsICd0ZXh0L3htbCcpXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgYXV0aG9yRWxlbWVudCA9IHhtbC5xdWVyeVNlbGVjdG9yKCdkY1xcXFw6Y3JlYXRvciwgY3JlYXRvcicpXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGF1dGhvcjogYXV0aG9yRWxlbWVudD8udGV4dENvbnRlbnQgfHwgdW5kZWZpbmVkXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCByZWFkIHByZXNlbnRhdGlvbiBwcm9wZXJ0aWVzOicsIGVycm9yKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge31cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgcmVhZFNsaWRlcygpOiBQcm9taXNlPFNsaWRlW10+IHtcclxuICAgIGNvbnN0IHNsaWRlczogU2xpZGVbXSA9IFtdXHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEdldCBzbGlkZSBjb3VudCBmcm9tIHByZXNlbnRhdGlvbi54bWxcclxuICAgICAgY29uc3QgcHJlc2VudGF0aW9uID0gdGhpcy56aXA/LmZpbGUoJ3BwdC9wcmVzZW50YXRpb24ueG1sJylcclxuICAgICAgaWYgKHByZXNlbnRhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBwcmVzZW50YXRpb24uYXN5bmMoJ3RleHQnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdQcmVzZW50YXRpb24gWE1MIGNvbnRlbnQ6JywgY29udGVudC5zdWJzdHJpbmcoMCwgNTAwKSArICcuLi4nKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKVxyXG4gICAgICAgIGNvbnN0IHhtbCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoY29udGVudCwgJ3RleHQveG1sJylcclxuICAgICAgICBcclxuICAgICAgICAvLyBUcnkgbXVsdGlwbGUgYXBwcm9hY2hlcyB0byBmaW5kIHNsaWRlc1xyXG4gICAgICAgIGxldCBzbGlkZUlkcyA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2xkSWQnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCAke3NsaWRlSWRzLmxlbmd0aH0gc2xpZGVzIHVzaW5nICdzbGRJZCcgdGFnYClcclxuICAgICAgICBcclxuICAgICAgICAvLyBJZiBubyBzbGlkZXMgZm91bmQsIHRyeSBhbHRlcm5hdGl2ZSBhcHByb2FjaGVzXHJcbiAgICAgICAgaWYgKHNsaWRlSWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgLy8gVHJ5IGxvb2tpbmcgZm9yIHNsaWRlcyBpbiB0aGUgc2xpZGVzIGZvbGRlciBkaXJlY3RseVxyXG4gICAgICAgICAgY29uc3Qgc2xpZGVGaWxlcyA9IE9iamVjdC5rZXlzKHRoaXMuemlwPy5maWxlcyB8fCB7fSlcclxuICAgICAgICAgICAgLmZpbHRlcihuYW1lID0+IG5hbWUuc3RhcnRzV2l0aCgncHB0L3NsaWRlcy9zbGlkZScpICYmIG5hbWUuZW5kc1dpdGgoJy54bWwnKSlcclxuICAgICAgICAgICAgLnNvcnQoKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRm91bmQgc2xpZGUgZmlsZXMgZGlyZWN0bHk6Jywgc2xpZGVGaWxlcylcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKHNsaWRlRmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgc2xpZGVzIGZyb20gdGhlIGZpbGVzIHdlIGZvdW5kXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVGaWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHNsaWRlRmlsZSA9IHNsaWRlRmlsZXNbaV1cclxuICAgICAgICAgICAgICBjb25zdCBzbGlkZU51bWJlciA9IGkgKyAxXHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYFByb2Nlc3Npbmcgc2xpZGUgZmlsZTogJHtzbGlkZUZpbGV9YClcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBjb25zdCBzbGlkZSA9IGF3YWl0IHRoaXMucmVhZFNsaWRlRnJvbUZpbGUoc2xpZGVGaWxlLCBzbGlkZU51bWJlcilcclxuICAgICAgICAgICAgICBpZiAoc2xpZGUpIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHNsaWRlKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBsb2FkZWQgc2xpZGUgJHtzbGlkZU51bWJlcn0gZnJvbSBmaWxlYClcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gUHJvY2VzcyBzbGlkZXMgdXNpbmcgdGhlIHRyYWRpdGlvbmFsIG1ldGhvZFxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZUlkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzbGlkZUlkID0gc2xpZGVJZHNbaV0uZ2V0QXR0cmlidXRlKCdyOmlkJylcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFByb2Nlc3Npbmcgc2xpZGUgJHtpICsgMX0gd2l0aCBJRDogJHtzbGlkZUlkfWApXHJcbiAgICAgICAgICAgIGlmIChzbGlkZUlkKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qgc2xpZGUgPSBhd2FpdCB0aGlzLnJlYWRTbGlkZShzbGlkZUlkLCBpICsgMSlcclxuICAgICAgICAgICAgICBpZiAoc2xpZGUpIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlcy5wdXNoKHNsaWRlKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBsb2FkZWQgc2xpZGUgJHtpICsgMX1gKVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBsb2FkIHNsaWRlICR7aSArIDF9YClcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCBwcmVzZW50YXRpb24ueG1sJylcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVhZGluZyBzbGlkZXM6JywgZXJyb3IpXHJcbiAgICAgIC8vIENyZWF0ZSBhIGRlZmF1bHQgc2xpZGUgaWYgcGFyc2luZyBmYWlsc1xyXG4gICAgICBzbGlkZXMucHVzaCh0aGlzLmNyZWF0ZURlZmF1bHRTbGlkZSgpKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgVG90YWwgc2xpZGVzIGxvYWRlZDogJHtzbGlkZXMubGVuZ3RofWApXHJcbiAgICByZXR1cm4gc2xpZGVzLmxlbmd0aCA+IDAgPyBzbGlkZXMgOiBbdGhpcy5jcmVhdGVEZWZhdWx0U2xpZGUoKV1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgcmVhZFNsaWRlKHNsaWRlSWQ6IHN0cmluZywgc2xpZGVOdW1iZXI6IG51bWJlcik6IFByb21pc2U8U2xpZGUgfCBudWxsPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBUcnkgdG8gZmluZCB0aGUgc2xpZGUgZmlsZSBkaXJlY3RseSBmaXJzdFxyXG4gICAgICBsZXQgc2xpZGVGaWxlID0gdGhpcy56aXA/LmZpbGUoYHBwdC9zbGlkZXMvc2xpZGUke3NsaWRlTnVtYmVyfS54bWxgKVxyXG4gICAgICBcclxuICAgICAgLy8gSWYgbm90IGZvdW5kLCB0cnkgdG8gZmluZCBpdCB0aHJvdWdoIHJlbGF0aW9uc2hpcHNcclxuICAgICAgaWYgKCFzbGlkZUZpbGUpIHtcclxuICAgICAgICBjb25zdCBzbGlkZVJlbCA9IHRoaXMuemlwPy5maWxlKGBwcHQvc2xpZGVzL19yZWxzL3NsaWRlJHtzbGlkZU51bWJlcn0ueG1sLnJlbHNgKVxyXG4gICAgICAgIGlmIChzbGlkZVJlbCkge1xyXG4gICAgICAgICAgY29uc3QgcmVsQ29udGVudCA9IGF3YWl0IHNsaWRlUmVsLmFzeW5jKCd0ZXh0JylcclxuICAgICAgICAgIGNvbnN0IHJlbFBhcnNlciA9IG5ldyBET01QYXJzZXIoKVxyXG4gICAgICAgICAgY29uc3QgcmVsWG1sID0gcmVsUGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZWxDb250ZW50LCAndGV4dC94bWwnKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBjb25zdCBzbGlkZVRhcmdldCA9IHJlbFhtbC5xdWVyeVNlbGVjdG9yKGBSZWxhdGlvbnNoaXBbSWQ9XCIke3NsaWRlSWR9XCJdYCk/LmdldEF0dHJpYnV0ZSgnVGFyZ2V0JylcclxuICAgICAgICAgIGlmIChzbGlkZVRhcmdldCkge1xyXG4gICAgICAgICAgICBjb25zdCBzbGlkZVBhdGggPSBgcHB0L3NsaWRlcy8ke3NsaWRlVGFyZ2V0LnNwbGl0KCcvJykucG9wKCl9YFxyXG4gICAgICAgICAgICBzbGlkZUZpbGUgPSB0aGlzLnppcD8uZmlsZShzbGlkZVBhdGgpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBJZiBzdGlsbCBub3QgZm91bmQsIHRyeSB0byBmaW5kIGFueSBzbGlkZSBmaWxlXHJcbiAgICAgIGlmICghc2xpZGVGaWxlKSB7XHJcbiAgICAgICAgY29uc3Qgc2xpZGVGaWxlcyA9IE9iamVjdC5rZXlzKHRoaXMuemlwPy5maWxlcyB8fCB7fSlcclxuICAgICAgICAgIC5maWx0ZXIobmFtZSA9PiBuYW1lLnN0YXJ0c1dpdGgoJ3BwdC9zbGlkZXMvc2xpZGUnKSAmJiBuYW1lLmVuZHNXaXRoKCcueG1sJykpXHJcbiAgICAgICAgICAuc29ydCgpXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHNsaWRlRmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgdGFyZ2V0U2xpZGUgPSBzbGlkZUZpbGVzW3NsaWRlTnVtYmVyIC0gMV0gfHwgc2xpZGVGaWxlc1swXVxyXG4gICAgICAgICAgc2xpZGVGaWxlID0gdGhpcy56aXA/LmZpbGUodGFyZ2V0U2xpZGUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXNsaWRlRmlsZSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgQ291bGQgbm90IGZpbmQgc2xpZGUgZmlsZSBmb3Igc2xpZGUgJHtzbGlkZU51bWJlcn1gKVxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHNsaWRlQ29udGVudCA9IGF3YWl0IHNsaWRlRmlsZS5hc3luYygndGV4dCcpXHJcbiAgICAgIGNvbnN0IHNsaWRlUGFyc2VyID0gbmV3IERPTVBhcnNlcigpXHJcbiAgICAgIGNvbnN0IHNsaWRlWG1sID0gc2xpZGVQYXJzZXIucGFyc2VGcm9tU3RyaW5nKHNsaWRlQ29udGVudCwgJ3RleHQveG1sJylcclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3Qgc2xpZGUgZGltZW5zaW9uc1xyXG4gICAgICBjb25zdCBzbGRTeiA9IHNsaWRlWG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzbGRTeicpWzBdXHJcbiAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQoc2xkU3o/LmdldEF0dHJpYnV0ZSgnY3gnKSB8fCAnOTE0NDAwMCcpIC8gMTI3MDAgLy8gQ29udmVydCBFTVVzIHRvIHBpeGVsc1xyXG4gICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUludChzbGRTej8uZ2V0QXR0cmlidXRlKCdjeScpIHx8ICc2ODU4MDAwJykgLyAxMjcwMFxyXG4gICAgICBcclxuICAgICAgLy8gRXh0cmFjdCBzaGFwZXNcclxuICAgICAgY29uc3Qgb2JqZWN0cyA9IGF3YWl0IHRoaXMuZXh0cmFjdFNoYXBlcyhzbGlkZVhtbCwgc2xpZGVOdW1iZXIpXHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICAgIG5hbWU6IGBTbGlkZSAke3NsaWRlTnVtYmVyfWAsXHJcbiAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgIG9iamVjdHMsXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlYWRpbmcgc2xpZGUgJHtzbGlkZU51bWJlcn06YCwgZXJyb3IpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHJlYWRTbGlkZUZyb21GaWxlKHNsaWRlRmlsZVBhdGg6IHN0cmluZywgc2xpZGVOdW1iZXI6IG51bWJlcik6IFByb21pc2U8U2xpZGUgfCBudWxsPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzbGlkZUZpbGUgPSB0aGlzLnppcD8uZmlsZShzbGlkZUZpbGVQYXRoKVxyXG4gICAgICBpZiAoIXNsaWRlRmlsZSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgQ291bGQgbm90IGZpbmQgc2xpZGUgZmlsZTogJHtzbGlkZUZpbGVQYXRofWApXHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3Qgc2xpZGVDb250ZW50ID0gYXdhaXQgc2xpZGVGaWxlLmFzeW5jKCd0ZXh0JylcclxuICAgICAgY29uc29sZS5sb2coYFNsaWRlICR7c2xpZGVOdW1iZXJ9IFhNTCBjb250ZW50OmAsIHNsaWRlQ29udGVudC5zdWJzdHJpbmcoMCwgMTAwMCkgKyAnLi4uJylcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHNsaWRlUGFyc2VyID0gbmV3IERPTVBhcnNlcigpXHJcbiAgICAgIGNvbnN0IHNsaWRlWG1sID0gc2xpZGVQYXJzZXIucGFyc2VGcm9tU3RyaW5nKHNsaWRlQ29udGVudCwgJ3RleHQveG1sJylcclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3Qgc2xpZGUgZGltZW5zaW9uc1xyXG4gICAgICBjb25zdCBzbGRTeiA9IHNsaWRlWG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzbGRTeicpWzBdXHJcbiAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQoc2xkU3o/LmdldEF0dHJpYnV0ZSgnY3gnKSB8fCAnOTE0NDAwMCcpIC8gMTI3MDAgLy8gQ29udmVydCBFTVVzIHRvIHBpeGVsc1xyXG4gICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUludChzbGRTej8uZ2V0QXR0cmlidXRlKCdjeScpIHx8ICc2ODU4MDAwJykgLyAxMjcwMFxyXG4gICAgICBcclxuICAgICAgLy8gRXh0cmFjdCBzaGFwZXNcclxuICAgICAgY29uc3Qgb2JqZWN0cyA9IGF3YWl0IHRoaXMuZXh0cmFjdFNoYXBlcyhzbGlkZVhtbCwgc2xpZGVOdW1iZXIpXHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICAgIG5hbWU6IGBTbGlkZSAke3NsaWRlTnVtYmVyfWAsXHJcbiAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgIG9iamVjdHMsXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlYWRpbmcgc2xpZGUgZnJvbSBmaWxlICR7c2xpZGVGaWxlUGF0aH06YCwgZXJyb3IpXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGV4dHJhY3RTaGFwZXMoc2xpZGVYbWw6IERvY3VtZW50LCBzbGlkZU51bWJlcjogbnVtYmVyKTogUHJvbWlzZTxTaGFwZU9iamVjdFtdPiB7XHJcbiAgICBjb25zdCBvYmplY3RzOiBTaGFwZU9iamVjdFtdID0gW11cclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coYEV4dHJhY3Rpbmcgc2hhcGVzIGZyb20gc2xpZGUgJHtzbGlkZU51bWJlcn1gKVxyXG4gICAgICBcclxuICAgICAgLy8gVHJ5IG11bHRpcGxlIGFwcHJvYWNoZXMgdG8gZmluZCBzaGFwZXNcclxuICAgICAgXHJcbiAgICAgIC8vIEFwcHJvYWNoIDE6IExvb2sgZm9yIHNwVHJlZSA+IHNwICh0cmFkaXRpb25hbCBzdHJ1Y3R1cmUpXHJcbiAgICAgIC8vIFVzZSBhIG1vcmUgcm9idXN0IGFwcHJvYWNoIHRvIGhhbmRsZSBuYW1lc3BhY2VzXHJcbiAgICAgIGxldCBzcFRyZWUgPSB0aGlzLmZpbmRFbGVtZW50QnlUYWdOYW1lKHNsaWRlWG1sLCAnc3BUcmVlJylcclxuICAgICAgaWYgKHNwVHJlZSkge1xyXG4gICAgICAgIGNvbnN0IHRleHRCb3hlcyA9IHRoaXMuZmluZEVsZW1lbnRzQnlUYWdOYW1lKHNwVHJlZSwgJ3NwJylcclxuICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHt0ZXh0Qm94ZXMubGVuZ3RofSBzaGFwZSBlbGVtZW50cyBpbiBzcFRyZWVgKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dEJveGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBjb25zdCB0ZXh0Qm94ID0gdGV4dEJveGVzW2ldXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2Vzc2luZyBzaGFwZSAke2kgKyAxfTpgLCB0ZXh0Qm94LnRhZ05hbWUsIHRleHRCb3guZ2V0QXR0cmlidXRlKCdpZCcpLCB0ZXh0Qm94LmdldEF0dHJpYnV0ZSgnbmFtZScpKVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgcGxhY2Vob2xkZXJcclxuICAgICAgICAgIGNvbnN0IG52UHIgPSB0aGlzLmZpbmRFbGVtZW50QnlUYWdOYW1lKHRleHRCb3gsICdudlByJylcclxuICAgICAgICAgIGNvbnN0IHBoID0gbnZQciA/IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUobnZQciwgJ3BoJykgOiBudWxsXHJcbiAgICAgICAgICBpZiAocGgpIHtcclxuICAgICAgICAgICAgY29uc3QgcGhUeXBlID0gcGguZ2V0QXR0cmlidXRlKCd0eXBlJylcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFNoYXBlICR7aSArIDF9IGlzIGEgcGxhY2Vob2xkZXIgb2YgdHlwZTogJHtwaFR5cGV9YClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLmV4dHJhY3RUZXh0Qm94KHRleHRCb3gsIHNsaWRlTnVtYmVyLCBpKVxyXG4gICAgICAgICAgaWYgKHNoYXBlKSB7XHJcbiAgICAgICAgICAgIG9iamVjdHMucHVzaChzaGFwZSlcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBleHRyYWN0ZWQgc2hhcGUgJHtpICsgMX06YCwgc2hhcGUudHlwZSwgc2hhcGUuY29udGVudCB8fCAnbm8gY29udGVudCcpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBleHRyYWN0IHNoYXBlICR7aSArIDF9YClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBzcFRyZWUgZm91bmQgaW4gc2xpZGUnKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyBBcHByb2FjaCAyOiBMb29rIGZvciBzaGFwZXMgZGlyZWN0bHkgaW4gdGhlIHNsaWRlXHJcbiAgICAgIGlmIChvYmplY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdUcnlpbmcgYWx0ZXJuYXRpdmUgc2hhcGUgZXh0cmFjdGlvbi4uLicpXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTG9vayBmb3IgYW55IHNwIGVsZW1lbnRzIGFueXdoZXJlIGluIHRoZSBzbGlkZVxyXG4gICAgICAgIGNvbnN0IGFsbFNwRWxlbWVudHMgPSB0aGlzLmZpbmRFbGVtZW50c0J5VGFnTmFtZShzbGlkZVhtbCwgJ3NwJylcclxuICAgICAgICBjb25zb2xlLmxvZyhgRm91bmQgJHthbGxTcEVsZW1lbnRzLmxlbmd0aH0gc3AgZWxlbWVudHMgaW4gc2xpZGVgKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsU3BFbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgY29uc3Qgc3BFbGVtZW50ID0gYWxsU3BFbGVtZW50c1tpXVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYFByb2Nlc3Npbmcgc3AgZWxlbWVudCAke2kgKyAxfTpgLCBzcEVsZW1lbnQudGFnTmFtZSwgc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSlcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLmV4dHJhY3RUZXh0Qm94KHNwRWxlbWVudCwgc2xpZGVOdW1iZXIsIGkpXHJcbiAgICAgICAgICBpZiAoc2hhcGUpIHtcclxuICAgICAgICAgICAgb2JqZWN0cy5wdXNoKHNoYXBlKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZCBzcCBlbGVtZW50ICR7aSArIDF9OmAsIHNoYXBlLnR5cGUsIHNoYXBlLmNvbnRlbnQgfHwgJ25vIGNvbnRlbnQnKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQXBwcm9hY2ggMzogTG9vayBmb3IgdGV4dCBlbGVtZW50cyBkaXJlY3RseVxyXG4gICAgICBpZiAob2JqZWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVHJ5aW5nIGRpcmVjdCB0ZXh0IGV4dHJhY3Rpb24uLi4nKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRleHRFbGVtZW50cyA9IHRoaXMuZmluZEVsZW1lbnRzQnlUYWdOYW1lKHNsaWRlWG1sLCAndCcpXHJcbiAgICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7dGV4dEVsZW1lbnRzLmxlbmd0aH0gdGV4dCBlbGVtZW50cyBkaXJlY3RseSBpbiBzbGlkZWApXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRleHRFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAvLyBDcmVhdGUgYSBzaW1wbGUgdGV4dCBvYmplY3QgZnJvbSB0aGUgZmlyc3QgdGV4dCBlbGVtZW50XHJcbiAgICAgICAgICBjb25zdCBmaXJzdFRleHQgPSB0ZXh0RWxlbWVudHNbMF1cclxuICAgICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gZmlyc3RUZXh0LnRleHRDb250ZW50IHx8ICdUZXh0J1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYENyZWF0aW5nIHRleHQgb2JqZWN0IHdpdGggY29udGVudDogXCIke3RleHRDb250ZW50fVwiYClcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3QgdGV4dE9iamVjdDogU2hhcGVPYmplY3QgPSB7XHJcbiAgICAgICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybToge1xyXG4gICAgICAgICAgICAgIGxlZnQ6IDEwMCxcclxuICAgICAgICAgICAgICB0b3A6IDEwMCxcclxuICAgICAgICAgICAgICB3aWR0aDogMzAwLFxyXG4gICAgICAgICAgICAgIGhlaWdodDogMTAwLFxyXG4gICAgICAgICAgICAgIGFuZ2xlOiAwLFxyXG4gICAgICAgICAgICAgIHNjYWxlWDogMSxcclxuICAgICAgICAgICAgICBzY2FsZVk6IDEsXHJcbiAgICAgICAgICAgICAgZmxpcFg6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGZsaXBZOiBmYWxzZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICBmb250RmFtaWx5OiAnQXJpYWwnLFxyXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAxOCxcclxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcclxuICAgICAgICAgICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxyXG4gICAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgY29sb3I6ICcjMDAwMDAwJyxcclxuICAgICAgICAgICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcclxuICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRleHRDb250ZW50LFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBvYmplY3RzLnB1c2godGV4dE9iamVjdClcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGVkIGZhbGxiYWNrIHRleHQgb2JqZWN0JylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIEV4dHJhY3QgaW1hZ2VzXHJcbiAgICAgIGNvbnN0IGltYWdlcyA9IHRoaXMuZmluZEVsZW1lbnRzQnlUYWdOYW1lKHNsaWRlWG1sLCAncGljJylcclxuICAgICAgY29uc29sZS5sb2coYEZvdW5kICR7aW1hZ2VzLmxlbmd0aH0gaW1hZ2UgZWxlbWVudHNgKVxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gaW1hZ2VzW2ldXHJcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLmV4dHJhY3RJbWFnZShpbWFnZSwgc2xpZGVOdW1iZXIsIGkpXHJcbiAgICAgICAgaWYgKHNoYXBlKSB7XHJcbiAgICAgICAgICBvYmplY3RzLnB1c2goc2hhcGUpXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZCBpbWFnZSAke2kgKyAxfWApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZyhgVG90YWwgb2JqZWN0cyBleHRyYWN0ZWQ6ICR7b2JqZWN0cy5sZW5ndGh9YClcclxuICAgICAgY29uc29sZS5sb2coJ0ZpbmFsIG9iamVjdHM6Jywgb2JqZWN0cy5tYXAob2JqID0+ICh7IHR5cGU6IG9iai50eXBlLCBjb250ZW50OiBvYmouY29udGVudCwgdHJhbnNmb3JtOiBvYmoudHJhbnNmb3JtIH0pKSlcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGV4dHJhY3Rpbmcgc2hhcGVzOicsIGVycm9yKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gb2JqZWN0c1xyXG4gIH1cclxuXHJcbiAgLy8gSGVscGVyIG1ldGhvZHMgdG8gaGFuZGxlIFhNTCBuYW1lc3BhY2VzXHJcbiAgcHJpdmF0ZSBmaW5kRWxlbWVudEJ5VGFnTmFtZShwYXJlbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCwgdGFnTmFtZTogc3RyaW5nKTogRWxlbWVudCB8IG51bGwge1xyXG4gICAgLy8gVHJ5IG11bHRpcGxlIGFwcHJvYWNoZXMgdG8gZmluZCB0aGUgZWxlbWVudFxyXG4gICAgbGV0IGVsZW1lbnQgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSlbMF1cclxuICAgIGlmIChlbGVtZW50KSByZXR1cm4gZWxlbWVudFxyXG4gICAgXHJcbiAgICAvLyBJZiBub3QgZm91bmQsIHRyeSB3aXRoIGNvbW1vbiBuYW1lc3BhY2UgcHJlZml4ZXNcclxuICAgIGNvbnN0IHByZWZpeGVzID0gWydwOicsICdhOicsICdyOicsICcnXVxyXG4gICAgZm9yIChjb25zdCBwcmVmaXggb2YgcHJlZml4ZXMpIHtcclxuICAgICAgY29uc3QgZnVsbFRhZ05hbWUgPSBwcmVmaXggKyB0YWdOYW1lXHJcbiAgICAgIGVsZW1lbnQgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZnVsbFRhZ05hbWUpWzBdXHJcbiAgICAgIGlmIChlbGVtZW50KSByZXR1cm4gZWxlbWVudFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBMYXN0IHJlc29ydDogc2VhcmNoIGJ5IHBhcnRpYWwgdGFnIG5hbWVcclxuICAgIGNvbnN0IGFsbEVsZW1lbnRzID0gcGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJylcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgZWwgPSBhbGxFbGVtZW50c1tpXVxyXG4gICAgICBpZiAoZWwudGFnTmFtZS5lbmRzV2l0aCh0YWdOYW1lKSB8fCBlbC50YWdOYW1lLmluY2x1ZGVzKHRhZ05hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZmluZEVsZW1lbnRzQnlUYWdOYW1lKHBhcmVudDogRWxlbWVudCB8IERvY3VtZW50LCB0YWdOYW1lOiBzdHJpbmcpOiBFbGVtZW50W10ge1xyXG4gICAgLy8gVHJ5IG11bHRpcGxlIGFwcHJvYWNoZXMgdG8gZmluZCBlbGVtZW50c1xyXG4gICAgbGV0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSkpXHJcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkgcmV0dXJuIGVsZW1lbnRzXHJcbiAgICBcclxuICAgIC8vIElmIG5vdCBmb3VuZCwgdHJ5IHdpdGggY29tbW9uIG5hbWVzcGFjZSBwcmVmaXhlc1xyXG4gICAgY29uc3QgcHJlZml4ZXMgPSBbJ3A6JywgJ2E6JywgJ3I6JywgJyddXHJcbiAgICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xyXG4gICAgICBjb25zdCBmdWxsVGFnTmFtZSA9IHByZWZpeCArIHRhZ05hbWVcclxuICAgICAgZWxlbWVudHMgPSBBcnJheS5mcm9tKHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShmdWxsVGFnTmFtZSkpXHJcbiAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAwKSByZXR1cm4gZWxlbWVudHNcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gTGFzdCByZXNvcnQ6IHNlYXJjaCBieSBwYXJ0aWFsIHRhZyBuYW1lXHJcbiAgICBjb25zdCBhbGxFbGVtZW50cyA9IHBhcmVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpXHJcbiAgICBjb25zdCBtYXRjaGluZ0VsZW1lbnRzOiBFbGVtZW50W10gPSBbXVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxFbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBlbCA9IGFsbEVsZW1lbnRzW2ldXHJcbiAgICAgIGlmIChlbC50YWdOYW1lLmVuZHNXaXRoKHRhZ05hbWUpIHx8IGVsLnRhZ05hbWUuaW5jbHVkZXModGFnTmFtZSkpIHtcclxuICAgICAgICBtYXRjaGluZ0VsZW1lbnRzLnB1c2goZWwpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG1hdGNoaW5nRWxlbWVudHNcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXh0cmFjdFRleHRCb3godGV4dEJveDogRWxlbWVudCwgc2xpZGVOdW1iZXI6IG51bWJlciwgaW5kZXg6IG51bWJlcik6IFNoYXBlT2JqZWN0IHwgbnVsbCB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgRXh0cmFjdGluZyB0ZXh0IGJveCAke2luZGV4ICsgMX0gZnJvbSBzbGlkZSAke3NsaWRlTnVtYmVyfWApXHJcbiAgICAgIGNvbnNvbGUubG9nKCdUZXh0IGJveCBlbGVtZW50OicsIHRleHRCb3gub3V0ZXJIVE1MLnN1YnN0cmluZygwLCA1MDApICsgJy4uLicpXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBzcFByID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZSh0ZXh0Qm94LCAnc3BQcicpXHJcbiAgICAgIGlmICghc3BQcikge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgTm8gc3BQciBmb3VuZCBpbiB0ZXh0IGJveCAke2luZGV4ICsgMX1gKVxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYWN0dWFsbHkgYSB0ZXh0IHNoYXBlIG9yIGEgZGlmZmVyZW50IHR5cGVcclxuICAgICAgY29uc3QgdHhCb2R5ID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZSh0ZXh0Qm94LCAndHhCb2R5JylcclxuICAgICAgY29uc3QgaGFzVGV4dCA9IHR4Qm9keSAmJiB0aGlzLmZpbmRFbGVtZW50c0J5VGFnTmFtZSh0eEJvZHksICd0JykubGVuZ3RoID4gMFxyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIHBsYWNlaG9sZGVyIG9yIHNoYXBlIHdpdGggdGV4dFxyXG4gICAgICBjb25zdCBudlByID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZSh0ZXh0Qm94LCAnbnZQcicpXHJcbiAgICAgIGNvbnN0IHBoID0gbnZQciA/IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUobnZQciwgJ3BoJykgOiBudWxsXHJcbiAgICAgIGNvbnN0IGlzUGxhY2Vob2xkZXIgPSBwaCAmJiBwaC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKVxyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgdGhlIGFjdHVhbCBzaGFwZSB0eXBlIGZyb20gc3BQclxyXG4gICAgICBjb25zdCBwcnN0R2VvbSA9IHNwUHIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3Byc3RHZW9tJylbMF0gfHwgc3BQci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYTpwcnN0R2VvbScpWzBdXHJcbiAgICAgIGNvbnN0IHNoYXBlVHlwZSA9IHByc3RHZW9tPy5nZXRBdHRyaWJ1dGUoJ3Byc3QnKVxyXG4gICAgICBcclxuICAgICAgY29uc29sZS5sb2coYFNoYXBlICR7aW5kZXggKyAxfSAtIGhhc1RleHQ6ICR7aGFzVGV4dH0sIGlzUGxhY2Vob2xkZXI6ICR7aXNQbGFjZWhvbGRlcn0sIHNoYXBlVHlwZTogJHtzaGFwZVR5cGV9YClcclxuICAgICAgXHJcbiAgICAgIC8vIElmIHRoaXMgaXMgYSByZWN0YW5nbGUsIGVsbGlwc2UsIG9yIG90aGVyIHNoYXBlIChub3QgdGV4dCksIGV4dHJhY3QgYXMgYmFzaWMgc2hhcGVcclxuICAgICAgaWYgKHNoYXBlVHlwZSAmJiBbJ3JlY3QnLCAncm91bmRSZWN0JywgJ2VsbGlwc2UnLCAnb3ZhbCcsICdsaW5lJ10uaW5jbHVkZXMoc2hhcGVUeXBlKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBTaGFwZSAke2luZGV4ICsgMX0gaXMgYSAke3NoYXBlVHlwZX0sIHRyZWF0aW5nIGFzIGJhc2ljIHNoYXBlYClcclxuICAgICAgICByZXR1cm4gdGhpcy5leHRyYWN0QmFzaWNTaGFwZSh0ZXh0Qm94LCBzbGlkZU51bWJlciwgaW5kZXgpXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIElmIHRoaXMgaGFzIG5vIHRleHQgYW5kIGlzIG5vdCBhIHBsYWNlaG9sZGVyLCB0cmVhdCBhcyBiYXNpYyBzaGFwZVxyXG4gICAgICBpZiAoIWhhc1RleHQgJiYgIWlzUGxhY2Vob2xkZXIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgU2hhcGUgJHtpbmRleCArIDF9IGhhcyBubyB0ZXh0IGFuZCBpcyBub3QgYSBwbGFjZWhvbGRlciwgdHJlYXRpbmcgYXMgYmFzaWMgc2hhcGVgKVxyXG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3RCYXNpY1NoYXBlKHRleHRCb3gsIHNsaWRlTnVtYmVyLCBpbmRleClcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gdGhpcy5leHRyYWN0VHJhbnNmb3JtKHNwUHIpXHJcbiAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gdGhpcy5leHRyYWN0VGV4dENvbnRlbnQodGV4dEJveClcclxuICAgICAgY29uc3QgdGV4dFN0eWxlID0gdGhpcy5leHRyYWN0VGV4dFN0eWxlKHRleHRCb3gpXHJcbiAgICAgIFxyXG4gICAgICBjb25zb2xlLmxvZyhgRXh0cmFjdGVkIHRleHQgYm94OiBjb250ZW50PVwiJHt0ZXh0Q29udGVudH1cIiwgdHJhbnNmb3JtPWAsIHRyYW5zZm9ybSlcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIHRyYW5zZm9ybSxcclxuICAgICAgICBzdHlsZTogdGV4dFN0eWxlLFxyXG4gICAgICAgIGNvbnRlbnQ6IHRleHRDb250ZW50LFxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBleHRyYWN0aW5nIHRleHQgYm94OicsIGVycm9yKVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0SW1hZ2UoaW1hZ2U6IEVsZW1lbnQsIHNsaWRlTnVtYmVyOiBudW1iZXIsIGluZGV4OiBudW1iZXIpOiBTaGFwZU9iamVjdCB8IG51bGwge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3Qgc3BQciA9IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUoaW1hZ2UsICdzcFByJylcclxuICAgICAgaWYgKCFzcFByKSByZXR1cm4gbnVsbFxyXG4gICAgICBcclxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gdGhpcy5leHRyYWN0VHJhbnNmb3JtKHNwUHIpXHJcbiAgICAgIFxyXG4gICAgICAvLyBGb3Igbm93LCB3ZSdsbCBjcmVhdGUgYSBwbGFjZWhvbGRlciBpbWFnZVxyXG4gICAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHlvdSdkIGV4dHJhY3QgdGhlIGFjdHVhbCBpbWFnZSBkYXRhXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgICAgdHlwZTogJ2ltYWdlJyxcclxuICAgICAgICB0cmFuc2Zvcm0sXHJcbiAgICAgICAgc3R5bGU6IHt9LFxyXG4gICAgICAgIHNyYzogYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtidG9hKCc8c3ZnIHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxyZWN0IHdpZHRoPVwiMTAwXCIgaGVpZ2h0PVwiMTAwXCIgZmlsbD1cIiNjY2NcIi8+PHRleHQgeD1cIjUwXCIgeT1cIjUwXCIgdGV4dC1hbmNob3I9XCJtaWRkbGVcIiBkeT1cIi4zZW1cIj5JbWFnZTwvdGV4dD48L3N2Zz4nKX1gLFxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBleHRyYWN0aW5nIGltYWdlOicsIGVycm9yKVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0QmFzaWNTaGFwZShzaGFwZTogRWxlbWVudCwgc2xpZGVOdW1iZXI6IG51bWJlciwgaW5kZXg6IG51bWJlcik6IFNoYXBlT2JqZWN0IHwgbnVsbCB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhgRXh0cmFjdGluZyBiYXNpYyBzaGFwZSAke2luZGV4ICsgMX0gZnJvbSBzbGlkZSAke3NsaWRlTnVtYmVyfWApXHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBzcFByID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZShzaGFwZSwgJ3NwUHInKVxyXG4gICAgICBpZiAoIXNwUHIpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oYE5vIHNwUHIgZm91bmQgaW4gYmFzaWMgc2hhcGUgJHtpbmRleCArIDF9YClcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0aGlzLmV4dHJhY3RUcmFuc2Zvcm0oc3BQcilcclxuICAgICAgY29uc3Qgc2hhcGVUeXBlID0gdGhpcy5kZXRlcm1pbmVTaGFwZVR5cGUoc3BQcilcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGBFeHRyYWN0ZWQgYmFzaWMgc2hhcGU6IHR5cGU9JHtzaGFwZVR5cGV9LCB0cmFuc2Zvcm09YCwgdHJhbnNmb3JtKVxyXG4gICAgICBcclxuICAgICAgLy8gRm9yIGJhc2ljIHNoYXBlcywgd2UgbWlnaHQgc3RpbGwgaGF2ZSBzb21lIHRleHQgY29udGVudCAobGlrZSBwbGFjZWhvbGRlcnMpXHJcbiAgICAgIGxldCBjb250ZW50ID0gJydcclxuICAgICAgY29uc3QgdHhCb2R5ID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZShzaGFwZSwgJ3R4Qm9keScpXHJcbiAgICAgIGlmICh0eEJvZHkpIHtcclxuICAgICAgICBjb250ZW50ID0gdGhpcy5leHRyYWN0VGV4dENvbnRlbnQoc2hhcGUpXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBwbGFjZWhvbGRlclxyXG4gICAgICBjb25zdCBudlByID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZShzaGFwZSwgJ252UHInKVxyXG4gICAgICBjb25zdCBwaCA9IG52UHIgPyB0aGlzLmZpbmRFbGVtZW50QnlUYWdOYW1lKG52UHIsICdwaCcpIDogbnVsbFxyXG4gICAgICBpZiAocGgpIHtcclxuICAgICAgICBjb25zdCBwaFR5cGUgPSBwaC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKVxyXG4gICAgICAgIGlmIChwaFR5cGUgPT09ICd0aXRsZScpIHtcclxuICAgICAgICAgIGNvbnRlbnQgPSAnVGl0bGUgUGxhY2Vob2xkZXInXHJcbiAgICAgICAgfSBlbHNlIGlmIChwaFR5cGUgPT09ICdib2R5Jykge1xyXG4gICAgICAgICAgY29udGVudCA9ICdCb2R5IFBsYWNlaG9sZGVyJ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb250ZW50ID0gJ0NvbnRlbnQgUGxhY2Vob2xkZXInXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICAgIHR5cGU6IHNoYXBlVHlwZSxcclxuICAgICAgICB0cmFuc2Zvcm0sXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgIGZpbGw6ICcjZTVlN2ViJywgLy8gRGVmYXVsdCBsaWdodCBncmF5IGZpbGwgZm9yIHNoYXBlc1xyXG4gICAgICAgICAgc3Ryb2tlOiAnIzZiNzI4MCcsIC8vIERlZmF1bHQgYm9yZGVyIGNvbG9yXHJcbiAgICAgICAgICBzdHJva2VXaWR0aDogMSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQgfHwgdW5kZWZpbmVkLCAvLyBPbmx5IGluY2x1ZGUgY29udGVudCBpZiBpdCBleGlzdHNcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZXh0cmFjdGluZyBiYXNpYyBzaGFwZTonLCBlcnJvcilcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXh0cmFjdFRyYW5zZm9ybShzcFByOiBFbGVtZW50KTogVHJhbnNmb3JtIHtcclxuICAgIC8vIERlYnVnIHRoZSBzcFByIGVsZW1lbnQgc3RydWN0dXJlXHJcbiAgICBjb25zb2xlLmxvZygnRXh0cmFjdGluZyB0cmFuc2Zvcm0gZnJvbSBzcFByOicsIHNwUHIub3V0ZXJIVE1MLnN1YnN0cmluZygwLCA1MDApICsgJy4uLicpXHJcbiAgICBcclxuICAgIC8vIFRyeSB0byBmaW5kIHhmcm0gZWxlbWVudCB3aXRoIGJldHRlciBuYW1lc3BhY2UgaGFuZGxpbmdcclxuICAgIGxldCB4ZnJtID0gc3BQci5nZXRFbGVtZW50c0J5VGFnTmFtZSgneGZybScpWzBdXHJcbiAgICBpZiAoIXhmcm0pIHtcclxuICAgICAgLy8gVHJ5IHdpdGggbmFtZXNwYWNlIHByZWZpeGVzXHJcbiAgICAgIHhmcm0gPSBzcFByLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhOnhmcm0nKVswXVxyXG4gICAgfVxyXG4gICAgaWYgKCF4ZnJtKSB7XHJcbiAgICAgIC8vIFRyeSBzZWFyY2hpbmcgYnkgcGFydGlhbCB0YWcgbmFtZVxyXG4gICAgICBjb25zdCBhbGxFbGVtZW50cyA9IHNwUHIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKVxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBhbGxFbGVtZW50c1tpXVxyXG4gICAgICAgIGlmIChlbC50YWdOYW1lLmluY2x1ZGVzKCd4ZnJtJykpIHtcclxuICAgICAgICAgIHhmcm0gPSBlbFxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ0ZvdW5kIHhmcm0gZWxlbWVudDonLCB4ZnJtPy5vdXRlckhUTUwpXHJcbiAgICBcclxuICAgIGlmICh4ZnJtKSB7XHJcbiAgICAgIC8vIEZpbmQgb2Zmc2V0LCBleHRlbnQsIGFuZCByb3RhdGlvbiB3aXRoIGJldHRlciBuYW1lc3BhY2UgaGFuZGxpbmdcclxuICAgICAgbGV0IG9mZiA9IHhmcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29mZicpWzBdXHJcbiAgICAgIGlmICghb2ZmKSBvZmYgPSB4ZnJtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhOm9mZicpWzBdXHJcbiAgICAgIFxyXG4gICAgICBsZXQgZXh0ID0geGZybS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZXh0JylbMF1cclxuICAgICAgaWYgKCFleHQpIGV4dCA9IHhmcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2E6ZXh0JylbMF1cclxuICAgICAgXHJcbiAgICAgIGxldCByb3QgPSB4ZnJtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdyb3QnKVswXVxyXG4gICAgICBpZiAoIXJvdCkgcm90ID0geGZybS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYTpyb3QnKVswXVxyXG4gICAgICBcclxuICAgICAgY29uc29sZS5sb2coJ1RyYW5zZm9ybSBlbGVtZW50cyAtIG9mZjonLCBvZmY/Lm91dGVySFRNTCwgJ2V4dDonLCBleHQ/Lm91dGVySFRNTCwgJ3JvdDonLCByb3Q/Lm91dGVySFRNTClcclxuICAgICAgXHJcbiAgICAgIC8vIENvbnZlcnQgRU1VcyB0byBwaXhlbHMgd2l0aCBiZXR0ZXIgc2NhbGluZ1xyXG4gICAgICAvLyAxIEVNVSA9IDEvOTE0NDAwIGluY2gsIDEgaW5jaCA9IDk2IHBpeGVscyAoc3RhbmRhcmQgRFBJKVxyXG4gICAgICAvLyBTbyAxIEVNVSA9IDk2LzkxNDQwMCA9IDAuMDAwMTA1IHBpeGVsc1xyXG4gICAgICAvLyBGb3IgYmV0dGVyIHZpc2liaWxpdHksIHdlJ2xsIHNjYWxlIHRoaXMgdXBcclxuICAgICAgY29uc3QgZW11VG9QaXhlbCA9IDk2IC8gOTE0NDAwXHJcbiAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gMSAvLyBBZGp1c3QgdGhpcyB0byBtYWtlIHNoYXBlcyBiaWdnZXIvc21hbGxlclxyXG4gICAgICBcclxuICAgICAgY29uc3QgbGVmdCA9IHBhcnNlSW50KG9mZj8uZ2V0QXR0cmlidXRlKCd4JykgfHwgJzAnKSAqIGVtdVRvUGl4ZWwgKiBzY2FsZUZhY3RvclxyXG4gICAgICBjb25zdCB0b3AgPSBwYXJzZUludChvZmY/LmdldEF0dHJpYnV0ZSgneScpIHx8ICcwJykgKiBlbXVUb1BpeGVsICogc2NhbGVGYWN0b3JcclxuICAgICAgY29uc3Qgd2lkdGggPSBwYXJzZUludChleHQ/LmdldEF0dHJpYnV0ZSgnY3gnKSB8fCAnMTAwMDAwMCcpICogZW11VG9QaXhlbCAqIHNjYWxlRmFjdG9yXHJcbiAgICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KGV4dD8uZ2V0QXR0cmlidXRlKCdjeScpIHx8ICcxMDAwMDAwJykgKiBlbXVUb1BpeGVsICogc2NhbGVGYWN0b3JcclxuICAgICAgY29uc3QgYW5nbGUgPSBwYXJzZUludChyb3Q/LmdldEF0dHJpYnV0ZSgndmFsJykgfHwgJzAnKSAvIDYwMDAwIC8vIENvbnZlcnQgNjBrdGhzIHRvIGRlZ3JlZXNcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHtcclxuICAgICAgICBsZWZ0OiBNYXRoLm1heCgwLCBsZWZ0KSxcclxuICAgICAgICB0b3A6IE1hdGgubWF4KDAsIHRvcCksXHJcbiAgICAgICAgd2lkdGg6IE1hdGgubWF4KDUwLCB3aWR0aCksIC8vIE1pbmltdW0gd2lkdGggb2YgNTBweFxyXG4gICAgICAgIGhlaWdodDogTWF0aC5tYXgoNTAsIGhlaWdodCksIC8vIE1pbmltdW0gaGVpZ2h0IG9mIDUwcHhcclxuICAgICAgICBhbmdsZSxcclxuICAgICAgICBzY2FsZVg6IDEsXHJcbiAgICAgICAgc2NhbGVZOiAxLFxyXG4gICAgICAgIGZsaXBYOiBmYWxzZSxcclxuICAgICAgICBmbGlwWTogZmFsc2UsXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKCdFeHRyYWN0ZWQgdHJhbnNmb3JtIChFTVUgdmFsdWVzKTonLCB7XHJcbiAgICAgICAgZW11TGVmdDogb2ZmPy5nZXRBdHRyaWJ1dGUoJ3gnKSxcclxuICAgICAgICBlbXVUb3A6IG9mZj8uZ2V0QXR0cmlidXRlKCd5JyksXHJcbiAgICAgICAgZW11V2lkdGg6IGV4dD8uZ2V0QXR0cmlidXRlKCdjeCcpLFxyXG4gICAgICAgIGVtdUhlaWdodDogZXh0Py5nZXRBdHRyaWJ1dGUoJ2N5JylcclxuICAgICAgfSlcclxuICAgICAgY29uc29sZS5sb2coJ0NvbnZlcnRlZCB0cmFuc2Zvcm0gKHBpeGVscyk6JywgdHJhbnNmb3JtKVxyXG4gICAgICByZXR1cm4gdHJhbnNmb3JtXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnNvbGUud2FybignTm8geGZybSBmb3VuZCwgdXNpbmcgZGVmYXVsdCB0cmFuc2Zvcm0nKVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGVmdDogMTAwLFxyXG4gICAgICB0b3A6IDEwMCxcclxuICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgaGVpZ2h0OiAxNTAsXHJcbiAgICAgIGFuZ2xlOiAwLFxyXG4gICAgICBzY2FsZVg6IDEsXHJcbiAgICAgIHNjYWxlWTogMSxcclxuICAgICAgZmxpcFg6IGZhbHNlLFxyXG4gICAgICBmbGlwWTogZmFsc2UsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGV4dHJhY3RUZXh0Q29udGVudCh0ZXh0Qm94OiBFbGVtZW50KTogc3RyaW5nIHtcclxuICAgIC8vIFRyeSBtdWx0aXBsZSBhcHByb2FjaGVzIHRvIGZpbmQgdGV4dCBjb250ZW50XHJcbiAgICBsZXQgY29udGVudCA9ICcnXHJcbiAgICBcclxuICAgIC8vIEZpcnN0IHRyeTogbG9vayBmb3IgdGV4dCBpbiB0eEJvZHkgPiBwID4gciA+IHRcclxuICAgIGNvbnN0IHR4Qm9keSA9IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUodGV4dEJveCwgJ3R4Qm9keScpXHJcbiAgICBpZiAodHhCb2R5KSB7XHJcbiAgICAgIGNvbnN0IHBhcmFncmFwaHMgPSB0aGlzLmZpbmRFbGVtZW50c0J5VGFnTmFtZSh0eEJvZHksICdwJylcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhZ3JhcGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gcGFyYWdyYXBoc1tpXVxyXG4gICAgICAgIGNvbnN0IHRleHRSdW5zID0gdGhpcy5maW5kRWxlbWVudHNCeVRhZ05hbWUocGFyYWdyYXBoLCAncicpXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZXh0UnVucy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgY29uc3QgdGV4dFJ1biA9IHRleHRSdW5zW2pdXHJcbiAgICAgICAgICBjb25zdCB0ZXh0RWxlbWVudCA9IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUodGV4dFJ1biwgJ3QnKVxyXG4gICAgICAgICAgaWYgKHRleHRFbGVtZW50ICYmIHRleHRFbGVtZW50LnRleHRDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgKz0gdGV4dEVsZW1lbnQudGV4dENvbnRlbnRcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkIGxpbmUgYnJlYWsgYmV0d2VlbiBwYXJhZ3JhcGhzXHJcbiAgICAgICAgaWYgKGkgPCBwYXJhZ3JhcGhzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIGNvbnRlbnQgKz0gJ1xcbidcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gU2Vjb25kIHRyeTogbG9vayBmb3IgdGV4dCBkaXJlY3RseSBpbiB0aGUgdGV4dEJveFxyXG4gICAgaWYgKCFjb250ZW50KSB7XHJcbiAgICAgIGNvbnN0IHRleHRFbGVtZW50cyA9IHRoaXMuZmluZEVsZW1lbnRzQnlUYWdOYW1lKHRleHRCb3gsICd0JylcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0RWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGV4dEVsZW1lbnRzW2ldXHJcbiAgICAgICAgaWYgKGVsZW1lbnQudGV4dENvbnRlbnQpIHtcclxuICAgICAgICAgIGNvbnRlbnQgKz0gZWxlbWVudC50ZXh0Q29udGVudFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBUaGlyZCB0cnk6IGxvb2sgZm9yIGFueSB0ZXh0IGNvbnRlbnQgaW4gdGhlIGVsZW1lbnRcclxuICAgIGlmICghY29udGVudCkge1xyXG4gICAgICBjb250ZW50ID0gdGV4dEJveC50ZXh0Q29udGVudCB8fCAnJ1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgRXh0cmFjdGVkIHRleHQgY29udGVudDogXCIke2NvbnRlbnR9XCJgKVxyXG4gICAgcmV0dXJuIGNvbnRlbnQgfHwgJ1RleHQgQm94J1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0VGV4dFN0eWxlKHRleHRCb3g6IEVsZW1lbnQpOiBQYXJ0aWFsPFRleHRTdHlsZT4ge1xyXG4gICAgY29uc3QgZGVmUlByID0gdGhpcy5maW5kRWxlbWVudEJ5VGFnTmFtZSh0ZXh0Qm94LCAnZGVmUlByJylcclxuICAgIFxyXG4gICAgaWYgKGRlZlJQcikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGZvbnRGYW1pbHk6IGRlZlJQci5nZXRBdHRyaWJ1dGUoJ3R5cGVmYWNlJykgfHwgJ0FyaWFsJyxcclxuICAgICAgICBmb250U2l6ZTogcGFyc2VJbnQoZGVmUlByLmdldEF0dHJpYnV0ZSgnc3onKSB8fCAnMTgwMCcpIC8gMTAwLCAvLyBDb252ZXJ0IDEwMHRocyB0byBwb2ludHNcclxuICAgICAgICBmb250V2VpZ2h0OiBkZWZSUHIuZ2V0QXR0cmlidXRlKCdiJykgPT09ICcxJyA/ICdib2xkJyA6ICdub3JtYWwnLFxyXG4gICAgICAgIGZvbnRTdHlsZTogZGVmUlByLmdldEF0dHJpYnV0ZSgnaScpID09PSAnMScgPyAnaXRhbGljJyA6ICdub3JtYWwnLFxyXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiBkZWZSUHIuZ2V0QXR0cmlidXRlKCd1JykgPT09ICcxJyA/ICd1bmRlcmxpbmUnIDogJ25vbmUnLFxyXG4gICAgICAgIGNvbG9yOiB0aGlzLmV4dHJhY3RDb2xvcihkZWZSUHIpLFxyXG4gICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgIGxpbmVIZWlnaHQ6IDEuMixcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBmb250RmFtaWx5OiAnQXJpYWwnLFxyXG4gICAgICBmb250U2l6ZTogMTgsXHJcbiAgICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxyXG4gICAgICBmb250U3R5bGU6ICdub3JtYWwnLFxyXG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxyXG4gICAgICBjb2xvcjogJyMwMDAwMDAnLFxyXG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcclxuICAgICAgbGluZUhlaWdodDogMS4yLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0Q29sb3IoZGVmUlByOiBFbGVtZW50KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHNvbGlkRmlsbCA9IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUoZGVmUlByLCAnc29saWRGaWxsJylcclxuICAgIGlmIChzb2xpZEZpbGwpIHtcclxuICAgICAgY29uc3Qgc3JnYkNsciA9IHRoaXMuZmluZEVsZW1lbnRCeVRhZ05hbWUoc29saWRGaWxsLCAnc3JnYkNscicpXHJcbiAgICAgIGlmIChzcmdiQ2xyKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gc3JnYkNsci5nZXRBdHRyaWJ1dGUoJ3ZhbCcpXHJcbiAgICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgICAgcmV0dXJuIGAjJHt2YWx9YFxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcjMDAwMDAwJ1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZXRlcm1pbmVTaGFwZVR5cGUoc3BQcjogRWxlbWVudCk6ICdyZWN0YW5nbGUnIHwgJ2VsbGlwc2UnIHwgJ2xpbmUnIHtcclxuICAgIC8vIFRyeSB0byBmaW5kIHByc3RHZW9tIGVsZW1lbnQgd2l0aCBiZXR0ZXIgbmFtZXNwYWNlIGhhbmRsaW5nXHJcbiAgICBsZXQgcHJzdEdlb20gPSBzcFByLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwcnN0R2VvbScpWzBdXHJcbiAgICBpZiAoIXByc3RHZW9tKSB7XHJcbiAgICAgIHByc3RHZW9tID0gc3BQci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYTpwcnN0R2VvbScpWzBdXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChwcnN0R2VvbSkge1xyXG4gICAgICBjb25zdCBwcnN0ID0gcHJzdEdlb20uZ2V0QXR0cmlidXRlKCdwcnN0JylcclxuICAgICAgY29uc29sZS5sb2coYEZvdW5kIHNoYXBlIHR5cGU6ICR7cHJzdH1gKVxyXG4gICAgICBcclxuICAgICAgc3dpdGNoIChwcnN0KSB7XHJcbiAgICAgICAgY2FzZSAncmVjdCc6XHJcbiAgICAgICAgY2FzZSAncm91bmRSZWN0JzpcclxuICAgICAgICAgIHJldHVybiAncmVjdGFuZ2xlJ1xyXG4gICAgICAgIGNhc2UgJ2VsbGlwc2UnOlxyXG4gICAgICAgIGNhc2UgJ292YWwnOlxyXG4gICAgICAgICAgcmV0dXJuICdlbGxpcHNlJ1xyXG4gICAgICAgIGNhc2UgJ2xpbmUnOlxyXG4gICAgICAgIGNhc2UgJ3N0cmFpZ2h0Q29ubmVjdG9yMSc6XHJcbiAgICAgICAgICByZXR1cm4gJ2xpbmUnXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBVbmtub3duIHNoYXBlIHR5cGU6ICR7cHJzdH0sIGRlZmF1bHRpbmcgdG8gcmVjdGFuZ2xlYClcclxuICAgICAgICAgIHJldHVybiAncmVjdGFuZ2xlJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIElmIG5vIHByc3RHZW9tIGZvdW5kLCB0cnkgdG8gZGV0ZXJtaW5lIGZyb20gb3RoZXIgcHJvcGVydGllc1xyXG4gICAgY29uc29sZS5sb2coJ05vIHByc3RHZW9tIGZvdW5kLCBkZWZhdWx0aW5nIHRvIHJlY3RhbmdsZScpXHJcbiAgICByZXR1cm4gJ3JlY3RhbmdsZSdcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRGVmYXVsdFNsaWRlKCk6IFNsaWRlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxyXG4gICAgICBuYW1lOiAnU2xpZGUgMScsXHJcbiAgICAgIHdpZHRoOiA5NjAsXHJcbiAgICAgIGhlaWdodDogNTQwLFxyXG4gICAgICBvYmplY3RzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXHJcbiAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHtcclxuICAgICAgICAgICAgbGVmdDogMTAwLFxyXG4gICAgICAgICAgICB0b3A6IDEwMCxcclxuICAgICAgICAgICAgd2lkdGg6IDMwMCxcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAsXHJcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxyXG4gICAgICAgICAgICBzY2FsZVg6IDEsXHJcbiAgICAgICAgICAgIHNjYWxlWTogMSxcclxuICAgICAgICAgICAgZmxpcFg6IGZhbHNlLFxyXG4gICAgICAgICAgICBmbGlwWTogZmFsc2UsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgZm9udEZhbWlseTogJ0FyaWFsJyxcclxuICAgICAgICAgICAgZm9udFNpemU6IDI0LFxyXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICAgICAgICAgIGNvbG9yOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGNvbnRlbnQ6ICdXZWxjb21lIHRvIFBQVFggRWRpdG9yJyxcclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4iXSwibmFtZXMiOlsiSlNaaXAiLCJQUFRYUGFyc2VyIiwicGFyc2VGaWxlIiwiZmlsZSIsImNvbnNvbGUiLCJsb2ciLCJ6aXAiLCJsb2FkQXN5bmMiLCJmaWxlTmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiZmlsZXMiLCJzbGlkZXMiLCJyZWFkU2xpZGVzIiwicHJvcGVydGllcyIsInJlYWRQcmVzZW50YXRpb25Qcm9wcyIsImlkIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsIm5hbWUiLCJyZXBsYWNlIiwibWV0YWRhdGEiLCJlcnJvciIsImNvcmVQcm9wcyIsImNvbnRlbnQiLCJhc3luYyIsInBhcnNlciIsIkRPTVBhcnNlciIsInhtbCIsInBhcnNlRnJvbVN0cmluZyIsImF1dGhvckVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYXV0aG9yIiwidGV4dENvbnRlbnQiLCJ1bmRlZmluZWQiLCJ3YXJuIiwicHJlc2VudGF0aW9uIiwic3Vic3RyaW5nIiwic2xpZGVJZHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsInNsaWRlRmlsZXMiLCJmaWx0ZXIiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzb3J0IiwiaSIsInNsaWRlRmlsZSIsInNsaWRlTnVtYmVyIiwic2xpZGUiLCJyZWFkU2xpZGVGcm9tRmlsZSIsInB1c2giLCJzbGlkZUlkIiwiZ2V0QXR0cmlidXRlIiwicmVhZFNsaWRlIiwiY3JlYXRlRGVmYXVsdFNsaWRlIiwic2xpZGVSZWwiLCJyZWxYbWwiLCJyZWxDb250ZW50IiwicmVsUGFyc2VyIiwic2xpZGVUYXJnZXQiLCJzbGlkZVBhdGgiLCJzcGxpdCIsInBvcCIsInRhcmdldFNsaWRlIiwic2xpZGVDb250ZW50Iiwic2xpZGVQYXJzZXIiLCJzbGlkZVhtbCIsInNsZFN6Iiwid2lkdGgiLCJwYXJzZUludCIsImhlaWdodCIsIm9iamVjdHMiLCJleHRyYWN0U2hhcGVzIiwic2xpZGVGaWxlUGF0aCIsInNwVHJlZSIsImZpbmRFbGVtZW50QnlUYWdOYW1lIiwidGV4dEJveGVzIiwiZmluZEVsZW1lbnRzQnlUYWdOYW1lIiwidGV4dEJveCIsInRhZ05hbWUiLCJudlByIiwicGgiLCJwaFR5cGUiLCJzaGFwZSIsImV4dHJhY3RUZXh0Qm94IiwidHlwZSIsImFsbFNwRWxlbWVudHMiLCJzcEVsZW1lbnQiLCJ0ZXh0RWxlbWVudHMiLCJmaXJzdFRleHQiLCJ0ZXh0T2JqZWN0IiwidHJhbnNmb3JtIiwibGVmdCIsInRvcCIsImFuZ2xlIiwic2NhbGVYIiwic2NhbGVZIiwiZmxpcFgiLCJmbGlwWSIsInN0eWxlIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSIsInRleHREZWNvcmF0aW9uIiwiY29sb3IiLCJ0ZXh0QWxpZ24iLCJsaW5lSGVpZ2h0IiwiaW1hZ2VzIiwiaW1hZ2UiLCJleHRyYWN0SW1hZ2UiLCJtYXAiLCJvYmoiLCJwYXJlbnQiLCJlbGVtZW50IiwicHJlZml4ZXMiLCJwcmVmaXgiLCJmdWxsVGFnTmFtZSIsImFsbEVsZW1lbnRzIiwiZWwiLCJpbmNsdWRlcyIsImVsZW1lbnRzIiwiQXJyYXkiLCJmcm9tIiwibWF0Y2hpbmdFbGVtZW50cyIsImluZGV4Iiwib3V0ZXJIVE1MIiwic3BQciIsInR4Qm9keSIsImhhc1RleHQiLCJpc1BsYWNlaG9sZGVyIiwicHJzdEdlb20iLCJzaGFwZVR5cGUiLCJleHRyYWN0QmFzaWNTaGFwZSIsImV4dHJhY3RUcmFuc2Zvcm0iLCJleHRyYWN0VGV4dENvbnRlbnQiLCJ0ZXh0U3R5bGUiLCJleHRyYWN0VGV4dFN0eWxlIiwic3JjIiwiYnRvYSIsImRldGVybWluZVNoYXBlVHlwZSIsImZpbGwiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInhmcm0iLCJvZmYiLCJleHQiLCJyb3QiLCJlbXVUb1BpeGVsIiwic2NhbGVGYWN0b3IiLCJNYXRoIiwibWF4IiwiZW11TGVmdCIsImVtdVRvcCIsImVtdVdpZHRoIiwiZW11SGVpZ2h0IiwicGFyYWdyYXBocyIsInBhcmFncmFwaCIsInRleHRSdW5zIiwiaiIsInRleHRSdW4iLCJ0ZXh0RWxlbWVudCIsImRlZlJQciIsImV4dHJhY3RDb2xvciIsInNvbGlkRmlsbCIsInNyZ2JDbHIiLCJ2YWwiLCJwcnN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/pptxParser.ts\n"));

/***/ })

});